<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: journey | Code Adventurer]]></title>
  <link href="http://codeadventurer.com/categories/journey/atom.xml" rel="self"/>
  <link href="http://codeadventurer.com/"/>
  <updated>2013-11-22T11:28:41-07:00</updated>
  <id>http://codeadventurer.com/</id>
  <author>
    <name><![CDATA[Persa Zula]]></name>
    <email><![CDATA[persa@persazula.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dinner Dash, Battleship & Javascript]]></title>
    <link href="http://codeadventurer.com/2013/11/22/dinner-dash"/>
    <updated>2013-11-22T11:07:00-07:00</updated>
    <id>http://codeadventurer.com/2013/11/22/dinner-dash</id>
    <content type="html"><![CDATA[<p>Last week, we finished up our Dinner Dash project in Rails. It was a great first dive into Rails, and I had a lot of fun learning about ActiveRecord, ActiveSupport, and all of the helper methods. <!-- more --> One of the biggest things I learned as we were wrapping up the project and working through our user interface is that in order to do BDD effectively, a project really needs to start off with wireframes. In the last two projects where I have used BDD, it&rsquo;s been a little rough connecting the user interface up in a logical way at the end. It makes much more sense to work through it at the beginning to help guide the final development and make design an easier piece of the puzzle.</p>

<p><img src="/images/dinner_dash.png" title="Platable" alt="Platable" />
<a href="http://platable.herokuapp.com">(See Platable on Heroku)</a></p>

<p>At the end of last week, we had our second code retreat. We worked through a few 50-minute sessions to build <a href="https://github.com/JumpstartLab/code_retreat">Battleship</a> under different constraints. Unlike our last code retreat, where the scope was much smaller and tests were provided to help guide the design of the API, this time there were only instructions of how the gameplay works. Although the problem is very interesting, it was frustrating to keep switching the context of which piece of the game we were building, and it did not seem like any of my pairs and I got remotely close to solving the piece at hand before we had to delete our code and start over on a new part of the game. However, the exercise has definitely piqued my interest, and I plan on revisiting Battleship on my own to try to build it as a CLI.</p>

<p>This week. we&rsquo;ve been working on JavaScript. It&rsquo;s been great to see how you can test JavaScript using Jasmine, and I&rsquo;ve started to fill in some of the holes in my previous JavaScript knowledge. The best part of the week when we went back to our Dinner Dash projects and started integrating the things we had learned into our projects by updating our cart data with ajax, generating JSON with Rails, and giving live feedback to users purchasing products. The changes we started to implement really began to make the projects shine, and made them feel more like modern web applications.</p>

<p>Overall, on the next project, I&rsquo;d like to integrate more wire framing, a more thought-out user interface, and a bit more of JavaScript to make the project feel more solid.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dashing Down the Rails]]></title>
    <link href="http://codeadventurer.com/2013/11/08/dashing-down-the-rails"/>
    <updated>2013-11-08T10:13:00-07:00</updated>
    <id>http://codeadventurer.com/2013/11/08/dashing-down-the-rails</id>
    <content type="html"><![CDATA[<p>It&rsquo;s amazing to look back on my time here at gSchool and realize that at this point in time, if I were in a shorter bootcamp program, I&rsquo;d be graduating today. <!-- more --> Instead, I&rsquo;m midway through my first Rails project, and learning about all of the features that Rails implements for me through a well-thought-out Ruby backend. When I want to write my own validators or database searches, I start down that journey, but then quickly realize that Rails has already taken care of it for me and that I just need to find the right method in the documentation.</p>

<p>I can imagine what a contrast this is for people who learn as little Ruby as possible in order to get by using all the magic that Rails provides. I think that if I didn&rsquo;t know about the internals of how it worked, I would likely end up in the same boat as when I was hacking things together in Drupal. I have often heard that it is best to know Ruby before working with Rails, and now having experience with both Ruby, and Sinatra, I can see the differences between what Rails provides, and what the language itself does for me, which I think is very important for anyone using any framework.</p>

<p>Our current project is called <a href="http://tutorials.jumpstartlab.com/projects/dinner_dash.html">Dinner Dash</a>, and the task at hand is to build an online ordering system for a restaurant. My group has been working with MiniTest, RackTest &amp; Capybara to use a BDD-style approach to the project, and we have also been using PivotalTracker to track our progress, combined with <a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a> to keep ourselves organized. My mentor works for PivotalLabs, and was very helpful in giving me a few more tips on how to use PivotalTracker to map through our user stories and scheduling our work and expectations.</p>

<p>At the beginning of this project, I was having a hard time mapping my prior knowledge of SQL queries and database relationships to ActiveRecord, but now I have a better grasp on it thanks to two sessions with two different people that helped me understand what was happening. My mentor, Brian Rose from PivotalLabs, helped me understand the entity relationship diagram of our current application by installing the <code>rails-erd</code> gem into our project and generating a PDF of our relationships for me. This was helpful to see, and his explanations helped immensely. I also sat with Jorge and we drew a few diagrams with carefully placed labels to map out a new many-to-many relationship I was creating, and now I think I have a good hold on the whole <code>belongs_to</code>, <code>has_many</code>, <code>is_one_of</code> structure.</p>

<p>I think that besides structuring models, views, and controllers well and understanding ActiveRecord, knowing all of the work that Rails can do might take a little time to learn and master &mdash; but overall I&rsquo;m enjoying working with it. My goals for this project are to get my feet wet with Rails, and start to understand where it can lift some of the burden of common tasks when building applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping a Website, Building a CMS]]></title>
    <link href="http://codeadventurer.com/2013/11/01/scraping-a-website"/>
    <updated>2013-11-01T09:12:00-06:00</updated>
    <id>http://codeadventurer.com/2013/11/01/scraping-a-website</id>
    <content type="html"><![CDATA[<p>This week, we started a quick-turnaround project in Sinatra called <a href="http://tutorials.jumpstartlab.com/projects/clone_wars.html">Clone Wars</a>. Our challenge was to pick one of five local businesses, build a CMS for their existing types of content, and then scrape their existing website into our database &mdash; all in three days. <!-- more --></p>

<p>On Monday, before the project started, we took a little time to research web scrapers as a class. Afterwards, we did a short <a href="http://tutorials.jumpstartlab.com/topics/mechanize.html">tutorial</a> with the <a href="https://github.com/sparklemotion/mechanize">Mechanize</a> and <a href="https://github.com/sparklemotion/nokogiri">Nokogiri</a> gems, and started scraping different websites.</p>

<p>We were assigned our teams in the afternoon, and got to planning out our project. We got up to speed on what local business we wanted to choose (we went for the <a href="http://thebikedepot.org/">Bike Depot</a>), and started sketching out what the different types of content might look like. We set up our hours of availability as a team, and decided that we wanted to approach the entire project from an acceptance-test-first approach. It was our first time trying it, but we were all very interested in learning how to do it.</p>

<p>We then sat down with Elaine from <a href="http://pivotallabs.com/">Pivotal Labs</a> (and prior gSchool student) to talk about user stories, acceptance tests, and <a href="http://www.pivotaltracker.com/">PivotalTracker</a>. She gave us a lot of good insight on how to use the tool, and soon we started crafting our user stories for the project.</p>

<p>Once we got to the point where we felt we had flushed out the project requirements from a user story perspective, we started digging in. We set up our Sinatra app, and began by writing our first Capybara user test. We ran that first testâ€¦ and it passed. That didn&rsquo;t make any sense &mdash; we had not set up any routes for the route that we had requested, and certainly did not have any views to display the content that the test requested!</p>

<p>This problem tripped us up for over an hour, when we discovered that in our Gemfile we had declared a test group, but we had not yet set our environment variables in our acceptance test. We also later discovered that looking for content as the first piece of an acceptance test is too many steps into the process &mdash; the first step would be to verify the response code. Finally on our way to a true failing test, we moved to the first piece of the error, and started working our way through the controller, the models, and the views. It was exciting to go through the process and actually successfully go from dummy data to a real database with real data in the matter of a few hours, and then repeat the process over and over again throughout the process.</p>

<p>From my perspective, our team worked incredibly well together. When one of us would get stuck, we&rsquo;d stop and explain what was happening, and why. We all paired (side note: what is the three-person equivalent of pairing? Triading?) throughout the length of the project, since we  had a small enough project that it was likely we might end up with merge conflicts otherwise.</p>

<p>Although we did not completely finish building the CMS in three days, we learned a lot about scraping, dynamic routing, serializing data into databases, and setting up different rack test groups. We had an awesome time trying the acceptace-test-first approach, and stuck together as a group to work through tough problems.</p>

<p>The differences between working in a two person versus a three person group weren&rsquo;t too obvious, since our project was so compact. I can definitely see where a four person group might split into two pairs that rotate, but with three people at different levels in the program, and with a small spec and a short timeframe, it seemed more appropriate to stick together and learn together.</p>

<p>If we had another week to work on Clone Wars, we&rsquo;d likely get our authorization working correctly, and work on integrating more functionality into the CMS &mdash; including the addition of news items, products for sale, and a volunteer database.</p>

<p>Overall, I was extremely satisfied with where we got with our project because I felt that we built it well, communicated with each other clearly, and have a solid foundation to build upon when we choose to revisit the project.</p>

<p>To see the project in action, you can visit George&rsquo;s <a href="https://github.com/Egogre/CloneWarz">GitHub repository</a>, clone the project, run <code>bundle</code>, then run <code>rackup</code> in your terminal, and visit your localhost for a peek at the project. At localhost/admin, you can view our CMS functionality. Make sure to take a look at our test suite, and run the tests by running the <code>rake</code> command in your terminal. Then marvel at the beautiful rainbow of passing tests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Apps &amp; Code Retreats]]></title>
    <link href="http://codeadventurer.com/2013/10/28/web-apps-and-code-retreats"/>
    <updated>2013-10-28T09:22:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/28/web-apps-and-code-retreats</id>
    <content type="html"><![CDATA[<p>Our latest project, finished last week, was <a href="http://tutorials.jumpstartlab.com/projects/idea_box.html">IdeaBox</a>. As mentioned in a previous post, we started building the project from a tutorial, without tests, and went from there. <!-- more --> I added unit tests before the weekend, and then started using Capybara for acceptance tests last. After watching the <a href="http://www.youtube.com/watch?v=BG_DDUD4M9E">RailsConf talk on BDD</a>, I realized I&rsquo;d much rather work from the outside-in approach demonstrated in the talk.*</p>

<p>After building through IdeaBox on our own, we presented the projects on Thursday afternoon. It was great to see everybody&rsquo;s work, and see how far they got in the project, learn about their &ldquo;a-ha!&rdquo; moments, and also hear about pain points. It was great to see a project starting to turn out differently &mdash; I&rsquo;m sure as the course progresses, we will end up with vastly different projects than in the first third of the course.</p>

<p>On Friday, we all left the classroom and Galvanize to have an all-day code retreat. We made our way to the <a href="http://www.rivernorthart.com/">RiNo</a> part of Denver and spent the day inside of <a href="https://www.facebook.com/thesourcedenver">The Source</a>, a rehabbed warehouse-turned-young-money-shopping-facility. (I&rsquo;m probably totally wrong, but that&rsquo;s the best way I can describe it). We spent the day pairing in 30 minute time blocks, switching partners after every time block, and working on the same problem from scratch in a different way. In the morning, we worked through the <a href="https://github.com/JumpstartLab/code_retreat/tree/master/beer">Beer Song</a> problem spec, and in the afternoon we worked through the <a href="https://github.com/JumpstartLab/code_retreat/tree/master/robot">Robot</a> spec. Each was interesting in it&rsquo;s own way, and both tested fundamentals &mdash; working with strings, or working with arrays and hashes.</p>

<p>It was exciting to work with so many different classmates, and come up with so many different solutions, based on different contraints. I learned about how to build a program with no conditional statements (since <code>if</code> is not object oriented), learned about traversing through an array using modulo math, and various other amazing tidbits. I had a lot of fun, learned a bunch, and left at the end of the day completely exhausted, but mentally invigorated. I hope that I can continue to participate in code retreats beyond gSchool &mdash; it seems like an amazing way to keep developers sharp and practice different pairing techniques.</p>

<p>I&rsquo;m really enjoying being back in web territory. I have a foundational understanding some things already, so I can focus on testing the applications, using Ruby, and building things in a TDD (or BDD) fashion. I definitely like Sinatra, and that it&rsquo;s lightweight enough that you can choose your own design pattern, your own database ORM, and pretty much everything inbetween. In contrast, I started playing with Rails for the first time last week, and I&rsquo;m not sure how I feel about how much work it does for the developer. I&rsquo;m sure I&rsquo;ll change my mind once I know how to build everything from scratch really well and don&rsquo;t want to always do it myself, but for now I enjoy learning how to implement all of the pieces.</p>

<hr />

<p><strong><em>Side note:</em></strong>
* My reason for liking the idea of BDD comes from the various times I&rsquo;ve been bitten by not having a way to test the entire experience from a user perspective. Our workload at my previous position was so high that often the developers would run through scenarios at a high level, test that things worked on their own machines, and ship the code to production. Often, many things went wrong in this process, sometimes after the client had already seen the problems themselves. We had started out with QA testers, but over time the people in the company that did QA on development projects were eventually reassigned to other things, leaving the developers without dedicated QA resources, and no time to do testing themselves. I would have loved to be able to do BDD back then, but then again, I&rsquo;m just learning about it now! I think I might give this approach a shot in a future project at gSchool, just to see how it differs from starting with unit tests first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Your Weakness]]></title>
    <link href="http://codeadventurer.com/2013/10/26/naming-your-weakness"/>
    <updated>2013-10-26T13:28:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/26/naming-your-weakness</id>
    <content type="html"><![CDATA[<p>This past week at gSchool, we had our first assessment. We were offered a problem, in this case, the <a href="http://tutorials.jumpstartlab.com/academy/workshops/scrabble.html">building blocks of the Scrabble game</a>, which included a short guide <!-- more -->that informed us of some of the API decisions based on the expected input and output of the program, and we sat down with one of our three instructors for 40 minutes, while they watched and listened to us work through the problem.</p>

<p>As an exercise in Enumerators a few weeks ago, I took a similar look at the beginnings of the Scrabble exercise (counting word scores), so I did not spend too much time &ldquo;preparing&rdquo; for the assessment. I did not want to memorize how to solve the problem, because I wanted a raw feel to how my process works from my instructors' perspective, so that I knew what I needed to work on improving.</p>

<p>Honestly, I was a little surprised by how it went. Although I got much further in solving the problem (with a little guidance in the right direction when I steered off course), my happiness with progress was not the purpose of the review. My reviewer pointed out that I had difficulties breaking down problems into their smaller pieces, and writing tests for these smaller pieces prior to attempting to solve the problem with code. I was using tests to verify my solutions as I busted through a problem, instead of using smaller tests along the way to drive the solutions.</p>

<p>I can memorize all the syntax out there, that has never been a problem for me. But can I use it efficiently and effectively? Not as well as I should. I was the student who shirked away from math courses, but loved science classes. I can tell you how many things work, recite hundreds of odd facts, but can I break down a logical pathway of WHY they work that way, and apply it to something else? Not always.</p>

<p>I thought I came to gSchool to learn Ruby best practices, learn agile and TDD, and make sure that I don&rsquo;t get lost in the world of StackOverflow and Google when I get stuck. But really, what I&rsquo;m starting to realize is that beyond those things, I came to gSchool to learn algorithmic thinking.</p>

<p>Learning to program is easy if you have a good foundation of algorithmic thinking, but this is something I never knew until this week. I had never heard the term until my assessment, and after the assessment, I wanted to do everything in my power to learn more about it, how to develop it, and find problems to practice.</p>

<p>My research on the matter leads me to conclude this:</p>

<ul>
<li>Repetition is how this skill is built</li>
<li>Smaller exercises are easier to digest</li>
<li>Math problems are actually great ways of building this skill</li>
<li>If you were a math major or minor, you&rsquo;ve probably mastered this already</li>
</ul>


<p>I guess it&rsquo;s finally time to face my fears of math so that I can become a better programmer.</p>

<p>As resources to help me practice building this skill, I&rsquo;m going to use various websites to work through at least a problem a day. <a href="http://projecteuler.net/">ProjectEuler</a> actually fits all three of the criteria above for how to build the skill. The problems are small, the build on one another, and they are math-focused. I&rsquo;ve found another, <a href="http://rosalind.info/problems/list-view/">Rosalind</a>, which is focused on BioInformatics, and seems promising for not quite as math-heavy solutions. Another interesting site is <a href="http://rubyquiz.com/">RubyQuiz</a>, but this one might not be quite as helpful, as many of the quizzes seem to already contain a problem break-down spelled out for the user.</p>

<p>My goal is to look back at the assessment at the end of this course, and inherently know how to break down a problem into it&rsquo;s smallest parts. I hope to marvel at how easily I can solve this problem, and many others &mdash; not through memorizing the solution, but by knowing how to work through the details.</p>

<hr />

<h4>Asides</h4>

<p>I also found <a href="http://www.google.com/edu/computational-thinking/index.html">this resource</a>, provided by Google, for any educators looking to teach kids math through the use of computational thinking. I may go through some of the exercises myself, even if they are for grades 6-12!</p>

<p><a href="https://www.udacity.com/course/cs215">This free course from Udacity</a> also explains algorithms through social networks. I&rsquo;ve started working through it and it seems like it will be helpful.</p>
]]></content>
  </entry>
  
</feed>
