<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: journey | Code Adventurer]]></title>
  <link href="http://codeadventurer.com/categories/journey/atom.xml" rel="self"/>
  <link href="http://codeadventurer.com/"/>
  <updated>2013-10-18T09:18:17-06:00</updated>
  <id>http://codeadventurer.com/</id>
  <author>
    <name><![CDATA[Persa Zula]]></name>
    <email><![CDATA[persa@persazula.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Back to the land of HTTP requests]]></title>
    <link href="http://codeadventurer.com/2013/10/18/back-to-the-land-of-http-requests"/>
    <updated>2013-10-18T08:58:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/18/back-to-the-land-of-http-requests</id>
    <content type="html"><![CDATA[<p>This week, we started using Sinatra to build a web application. At the start of the week, we built <a href="http://tutorials.jumpstartlab.com/projects/web_guesser.html">WebGuesser</a>, a random-number guessing site <!--more -->that allows for a user to guess the number, and gives feedback on how close they are. <a href="http://agile-peak-6795.herokuapp.com/">My version</a> has a few bugs. For instance, if two people are accessing the site at the same time and playing, each person&rsquo;s guess counts towards the total, so you may only guess once or twice and be presented with a &ldquo;Too many guesses&rdquo; message. This can easily be solved with session cookies, but I haven&rsquo;t gotten around to refactoring yet. I&rsquo;m sure I&rsquo;ll get a chance to come back and make that short project better.</p>

<p>We also started building <a href="http://tutorials.jumpstartlab.com/projects/idea_box.html">IdeaBox</a>, a place for someone to jot down ideas and store them. Originally, I just worked through the tutorial to have an understanding of the application, and then I implemented a few changes before writing tests. It was hard to work through the tutorial to understand what was happening and try to write tests at the same time, but now that I have gone back and written tests for the application, I am much more comfortable with moving forward with implementing the extensions.</p>

<p>I actually feel that writing the tests gave me a better understanding of each piece of the application. I definitely felt the pain of not having tests when I had decided to change how IDs are generated and add them to the YAML database, without any tests to help me spot where things were breaking. I&rsquo;m still shaky on the best ways to test web applications from the acceptance-test level, but I&rsquo;ve got five more months to nail that piece!</p>

<p>What I like about this project is that we are working at our own pace. Some people will have amazing full-blown web apps with design, users, SMS capability, etc. at the end of this, others will have gone through the basic implementation, and everyone will have a better understanding of how web applications work. It&rsquo;s also been great to be in groups of four because we are all at different stages of the project, and can ask for help in specific places, instead of being dragged along by a stronger pair.</p>

<p>Next week, we&rsquo;re going to have our first assessment. I think we&rsquo;ll be paired with one of our instructors for the length of the assessment, and will have to build a program while being observed. This sounds a little intimidating, but the instructors are also there to provide feedback on our thought process and implementation, which I think is one of the coolest opportunities in the program. I think I&rsquo;ll be overall in a good place during the assessment, and I&rsquo;m very eager to find out what I need to spend more time learning and understanding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A week of focus is worth a thousand projects]]></title>
    <link href="http://codeadventurer.com/2013/10/11/a-week-of-focus-is-worth-a-thousand-projects"/>
    <updated>2013-10-11T09:01:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/11/a-week-of-focus-is-worth-a-thousand-projects</id>
    <content type="html"><![CDATA[<p>This past week at gSchool, we broke out into groups based on how comfortable we felt with the projects we had done and the techniques and methods used in them. <!-- more --> We had an emerging group, a progress group, and an advanced group. In these groups, we would focus on taking what we knew, building on it, and pushing ourselves past our comfort levels.</p>

<p>I felt like I could get some benefit out of the exercises the emerging group has been working on (like locking in various ways of using hashes, arrays, and enumerators), but I also had a feeling that I might have a good enough grasp on those things that I could push myself in a different way. Instead, I chose to join in with Jeff&rsquo;s group, the progress group, to take a fresh look at our first paired project from a few weeks back, <a href="http://tutorials.jumpstartlab.com/projects/event_reporter.html">EventReporter</a>.</p>

<p>The first time around this project, I had been tackling it from the provided test routes, one item at the time. I also had chosen not to work closely with my pair, because he had completed the assignment several times before and was beyond my level in terms of understanding how to do it, and I had wanted to learn how to go about it myself instead of watching someone code things I did not understand. If I had actually paired with him, I probably would have had the project completed, but I&rsquo;m not sure if I would have learned as much. So originally, my EventReporter was not complete, nor very pretty.</p>

<p>It was great to step through the thought process with Jeff this week. He helped us understand how to break down the problem, how to start with an MVP, how to create test doubles (or stubs) so that our tests were independent of each other (in the case of unit tests), and to build small pieces of a project and get one piece working at a time using test-driven development. He also helped us understand when to use text fixtures, and when to use hard-coded data in tests.</p>

<p>Throughout the week, we tacked a method or two a day, writing the tests, talking through the process, and slowly chipping away at the requirements. We started with a much better separation of concerns than the first time around (when many of us had everything in one giant method, in one giant file). It felt great to bring in all of our pieces yesterday, and write one controller that brought it all to life as a command line interface. After a little debugging, many of us had an EventReporter that worked, in half of the time with twice the quality of the first round.</p>

<p>Although I&rsquo;m not yet a master of creating beautiful, small, concise methods, and knowing when to use <code>send</code> instead of an <code>if</code> statement, I have a great example with commit messages at every step to reference when I need to dig in and remember how we did things.</p>

<p>It was great to work with a group at my same level of understanding for the week, and not be derailed by questions that are either to basic or too advanced for our current skillset. I&rsquo;m not sure if I&rsquo;d want the entire 24 weeks to work this way, but I do think that pairing with someone of a similar skill level is helpful. I have found that when I have been paired with someone who has been programming in Ruby for longer than the course, that they often do not explain their thought process and just forge ahead to get done with things, instead of hanging back to bring the person with less experience up to their level. I believe the true purpose of pairing is to slow down, explain your thought process, and pair through a problem together. If more advanced students were willing to do this without taking control of a project, I&rsquo;d be happy to be paired with them. Otherwise, I&rsquo;d rather stay with someone who is at the same level of understanding as me.</p>

<p>After this week of focus, which has helped me immensely in terms of understanding how to do things the right way (moreso than working independently on projects without much instruction) I&rsquo;m excited that we&rsquo;re digging into web applications next week. Although I&rsquo;ve built small web systems in PHP before, I know I have a lot to learn and am eager to get on the right path.</p>

<p>(<strong>Title disclaimer</strong>: *Ok, so perhaps more like worth two projects)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turtles & Mentors]]></title>
    <link href="http://codeadventurer.com/2013/10/04/learning-from-a-mentor"/>
    <updated>2013-10-04T20:41:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/04/learning-from-a-mentor</id>
    <content type="html"><![CDATA[<p>Our most recent project at gSchool, called <a href="http://tutorials.jumpstartlab.com/projects/sales_engine.html">SalesEngine</a>, was quite a stretch for a lot of us in the class. <!-- more --> Beyond the complexity of EventReporter, we had not had any time to recover from that project, overview the lessons learned, and reinforce the most important concepts from from the project. Instead, we jumped right into the next project, some of us without even having touched EventReporter, others with only half of the project completed.</p>

<p>With our new pairs, we dove into the requirements. The project looked massive at first glance, but slowly we started to follow through the requirements (with very handy method and class name requirement) and made progress.</p>

<p>Our progress skidded to a halt once we hit the relationships piece. Although I understand databases, foreign key relationships and how to get my data in and out of MySQL using PHP, I had no idea how to get my objects to pass around stored information to each other in Ruby.</p>

<p>My partner was equally confused. We stepped through an explanation with Jorge on Friday, and spent the weekend putting it together. We took the approach of calling our main interface class, SalesEngine, from every other piece of the program, so that we could reach through SalesEngine down into our data storage collections (called Repositories in this project). Apparently, we didn&rsquo;t understand the Object Model, but then again we haven&rsquo;t talked much about the Object Model except for the fact that everything is an object.</p>

<p>Having completed our relationships piece exactly the wrong way, we were on to building the pieces of business intelligence into the program. Suddenly we had to actually make our idea of the relationships make sense in our heads to get these pieces working, and suddenly everything seemed to be running in circles. On Monday, our instructor Katrina helped us understand where we went wrong, and showed us how to pass through a copy of SalesEngine (by using <code>self</code>) to each repository, and in turn to each individual piece of the program.</p>

<p>We spent a good deal of time of Monday refactoring our relationship model, and finally were back to our original issue: how do we grab and compare data stored in different places in the application?</p>

<p>After some nudging and help from various instructors, we started to understand how things were supposed to work. On Tuesday, with two days to go, we got to building the first few pieces of business intelligence. I sat down to read the piece on the first item, and this is what my psuedocode looked like:</p>

<p>``` ruby
 def test_it_can_find_the_merchant_with_the_most_x_revenue</p>

<pre><code>engine = SalesEngine.new("./test/fixtures")
# find all invoices by merchant_id
# then find each invoice id for the merchant_id
# use invoice_id to call invoice_items that match
# compare these invoice_id's to tranactions invoice_id 
# only use the ids that have result == success
# take the quantitiy of the items &amp; multiply by the price
# process the price into BigDecimal (don't use Float)
# store that in an array
# sort the array on .sort or some similar array method
</code></pre>

<p> end
```</p>

<p>In the end, this pseudocode actually didn&rsquo;t help me out at all. It wasn&rsquo;t until I stepped back and read through
all of the requirements that I realized that starting at the top of the list would not get us to the final endpoint. In order to report the top <code>x</code> merchants based on revenue, we would have to create helper classes associated with invoices and transactions.</p>

<p>Eventually, by the end of the night we had tested and created methods for our individual <code>Merchant</code>, <code>Invoice</code>, <code>Transaction</code>, and <code>MerchantRepository</code> classes to help us get some sort of response from the system.</p>

<p>But there was a bug. And that it turns out that wherever there is one bug, there are many more in hiding. It was 4:30, and the instructors were leaving for the day, and we were stuck.</p>

<p>Thankfully, <a href="https://twitter.com/corylanou">Cory LaNou</a> and <a href="https://twitter.com/levicook">Levi Cook</a>, founders and developers at <a href="http://www.supportlocal.com/">SupportLocal</a>, offer their time and energy for help on Tuesday evenings to gSchool students.</p>

<p>Cory spent four hours with my partner and I that night, showing us how to debug a program, and exploring with us where things were going wrong. Besides various errors that we have made using core methods, we also discovered that our test data set was completely useless without our foreign keys matching up. It took us that fours hours to get two tests to pass.</p>

<p>I couldn&rsquo;t believe how much time he had spent with us, going around in circles, walking us through debugging, and helping us find the issues in our program. I would love it if every mentor out there were as patient as Cory.</p>

<p>Although in the end we did not finish SalesEngine, I believe the lessons we learned from Cory about debugging, and the persistence needed when tracking down issues, were monumental, and very important to the success of our future projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning from the Community]]></title>
    <link href="http://codeadventurer.com/2013/09/29/learning-from-the-community"/>
    <updated>2013-09-29T18:40:00-06:00</updated>
    <id>http://codeadventurer.com/2013/09/29/learning-from-the-community</id>
    <content type="html"><![CDATA[<p>This past week of gSchool, we got our first outside-of-the-classroom introductions to the Ruby community by attending <a href="http://rockymtnruby.com/">Rocky Mountain Ruby Conf</a><!-- more -->, and also by having a personal session with <a href="https://github.com/wayneeseguin">Wayne E. Seguin</a>, the original creator of RVM.</p>

<p>Wayne taught us a few important lessons, but the most important advice I heard is to know yourself, and to know how to deal with yourself. As a similar work-a-holic, when I am at home (aka: not in gSchool, where work-a-holicism is somewhat of a neccessity), I tend to spend hours learning new things after work, and ignoring my friends and family. Although great for keeping up with the current tech trends, this tends to wear on my personal relationships. To combat this, Wayne has set aside the 5pm to 8pm block of time as &ldquo;family time&rdquo;, and has alerted all of his friends, the open source projects he works on, and his colleagues of this rule. He sticks to it, and with this expectation, he does not let anyone down. His family knows his focus is on them during that time, and his co-collaborators respect that he is away and unavailable to work during that time of day.</p>

<p>At Rocky Mountain Ruby, I learned a lot about the community. Aside from the stickers, soft tshirts, and good food, the presenters where really knowledgable about their topics. I have attended conferences before, but I have never been to a conference with only one track. This was interesting to me, because although I didn&rsquo;t have enough practical knowledge on the subject, I was forced to hear about threading, Go (the language), and 17 databases that I&rsquo;ve never heard of before, I listened throughout the presentations and was able to learn something about the subject. Coming out of the conference, I was amazed at how much I had understood about every presentation. It goes to show that if you listen and try to understand, you will learn.*</p>

<p>Learning from the community, regardless of whether it is the Ruby community, or another community in general, is a very interesting experience. If you listen carefully, you hear about the triumphs, the losses, the intersections of people and pride, and the lessons that others have learned. I&rsquo;ve found that it is wise to listen hard during these anecdotes, because those that wore this path before us have made mistakes (or discoveries) that we can benefit from knowing, and hopefully apply to our own individual journeys.</p>

<p><strong>*Pro-tip:</strong> Sit in the front during conferences and presentations. If you have any sense of shame left in you, you won&rsquo;t be as compelled to whip open your laptop or check your phone. And without distractions, there is only one thing left to do: listen to the presentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning is Effin' Hard]]></title>
    <link href="http://codeadventurer.com/2013/09/20/learning-is-effin-hard"/>
    <updated>2013-09-20T09:04:00-06:00</updated>
    <id>http://codeadventurer.com/2013/09/20/learning-is-effin-hard</id>
    <content type="html"><![CDATA[<p>Two days into building Event Reporter (you can find the project guidelines <a href="http://tutorials.jumpstartlab.com/projects/event_reporter.html">here</a>), I was flummoxed. <!-- more -->I&rsquo;d only been programming in Ruby for a little over a week, and we were diving head-first into test-driven development, while programming our first project without any training wheels. I came to Katrina, our super-heroine, molecular-biologist-turned-programmer instructor, and showed her my codebase. I was trying hard to separate concerns, build different classes, and keep every class and every test in its own file. This was starting to confuse me, and I was starting to lose sight of how to connect all the pieces back to one another. She took a few looks at what I had done, and asked me to <code>rm -rf</code> everything. All of it.</p>

<p>I looked at her in disbelief, explained that this was hours worth of work (even though really it looked like there wasn&rsquo;t much there)… and then complied. And cried a little inside.</p>

<p>Starting with a blank slate, and just two files this time &ndash; one for all of my classes, and one for all of my tests &ndash; I looked at the requirements and started building from the first test case, &ldquo;Happy Path&rdquo;. I had one day left before the project was done, and I was starting to stress out. Why was this so hard? Every class I&rsquo;ve ever taken, every passion I have pursued, has come easily to me. I can memorize insane facts, make connections between farming and management, lead groups, organize events, cook awesome organic meals, fix bicycles, juggle, live in yurts… and this project is the thing that is going to show me who is boss? I couldn&rsquo;t handle it.</p>

<p>With every hour that went by, as some tests failed and somewhere along the way, a few passed, I kept getting more and more frustrated. I started to doubt being ever able to call myself a web developer in the past. If I couldn&rsquo;t get this basic project to work, how was I going to move on to the next one? At 8:30pm the night before the project was due, I had only four methods that could pass tests. I shut my laptop, realized there was no way I could finish in time, and went to sleep.</p>

<p>I awoke at 3:30am from dreams where I was expertly solving Event Reporter, one passing test at a time, and quickly got out my laptop to try to recreate what was I was programming in my dreams. I cranked out the tests, and slowly started realizing that all of it was gibberish. Dream-state me wasn&rsquo;t actually expertly solving anything, although it seemed like it. But, I was awake anyway, so I hit the gym at 4am, got through my workout, and decided to come to gSchool early and try again.</p>

<p>I worked through my code for a little while before Katrina showed up (she has some crazy schedule where she goes to bed at 8pm and gets to work at 5am), and helped me back away from the ledge of jumping off of the programmer cliff. She looked at me and said, &ldquo;Learning is elfin' hard.&rdquo; Coming from a molecular biologist, I must have actually believed her, because an hour and  half later, after talking through my code and my struggles, I started to feel better about the project (even through I was still nowhere near done).</p>

<p>I&rsquo;m still not done today, but I have an idea of where I&rsquo;m going. Talking with Katrina, Jorge, and Franklin during different pieces, and various colorful feelings ranging from rage to anger to depression to self-hate (gosh, I never knew programming could bring out so much in me) really helped me understand that all of us at gSchool are used to being good at things. And a lot of us are struggling &mdash; not just with the syntax and the TDD mindset, but also with this ego-crushing feeling of failure.</p>

<p>And then I have to remind myself that today is day 10 of gSchool. And there are still five and a half months to go. Two weeks ago, I had never written a test for one of my programs. I&rsquo;ve learned a lot in this time &mdash; not only about Ruby, but about myself, my classmates, and the human spirit.</p>

<p>Thank you, gSchool, for showing me that learning a new programming language can be one of the most amazing things to teach me about myself.</p>

<p>If you&rsquo;re interested in the spiderweb of code I&rsquo;ve been building for this project, you can find my codebase on <a href="https://github.com/pzula/event_reporter">GitHub</a>. Feel free to let me know what you think, either about the code, or about my journey, or about similar experiences you&rsquo;ve had in the comments section.</p>
]]></content>
  </entry>
  
</feed>
