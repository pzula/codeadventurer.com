<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Adventurer]]></title>
  <link href="http://codeadventurer.com/atom.xml" rel="self"/>
  <link href="http://codeadventurer.com/"/>
  <updated>2014-01-03T09:32:45-07:00</updated>
  <id>http://codeadventurer.com/</id>
  <author>
    <name><![CDATA[Persa Zula]]></name>
    <email><![CDATA[persa@persazula.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[56 days until takeoff]]></title>
    <link href="http://codeadventurer.com/2014/01/03/56-days-until-takeoff"/>
    <updated>2014-01-03T09:05:00-07:00</updated>
    <id>http://codeadventurer.com/2014/01/03/56-days-until-takeoff</id>
    <content type="html"><![CDATA[<p>56 days from now, 26 students from gSchool will be closing their laptops, saying their goodbyes, and getting ready to start their careers as software developers. Some of them will be staying in Denver, some will be joining past graduates of the program built by Jumpstart Lab, and others will be spreading out across the country, working at startups, consultancies, and corporations. Regardless of where they end up, the six months they spent together will never be forgotten. The shared wins and frustrations, the walking taco days and lunchtime dip parties, and plenty of post-project-deadline happy hours have built solid friendships that are sure to last the test of time.</p>

<p>Before that day comes, I still have work to do. As I&rsquo;m reading Sandi Metz&rsquo;s book, <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?ie=UTF8&amp;qid=1388765519&amp;sr=8-1&amp;keywords=practical+object-oriented+design+in+ruby">Practical Object Oriented Design in Ruby</a>, I see that I can improve on the way I think about and execute the design of applications. I&rsquo;m excited to work through the book, and apply the lessons in my projects.</p>

<p>I&rsquo;m also attending <a href="http://codemash.org">CodeMash</a> this upcoming week and will begin looking for companies where I would make a good fit. I&rsquo;m planning on returning to Ohio after graduation, and would like to see what sort of opportunities are available. Thanks to my instructors, I already have a few connections to meet with next week to discuss the job climate in the Cleveland area. I&rsquo;m excited to talk to them and get to know other Rubyists in Ohio.</p>

<p>While I&rsquo;m at CodeMash, I&rsquo;ll be missing work time on our current project, FeedEngine, which is all about APIs. I&rsquo;ll be doing my best to communicate with my group, and contribute where I can without interfering with the overall progress. It will be interesting to see if I can integrate lessons from the conference into the project as well.</p>

<p>I&rsquo;m also excited for our upcoming project focused on Service-Oriented Architecture, and finally our Mastery project. I received some fun hardware for Christmas and hope to use it in my final project to integrate my passion for technology with my passion for agriculture.</p>

<p>On a final note, my mentor, Matt Rogers, has been a tremendous resource. His help and understanding has really helped me grow as a developer. I applaud his ability to find relevant open-source work to help explain new concepts, or reinforce the ones I did not understand well. He has been diligent in following along the curriculum, asking me about the projects I am working on, and helping me understand where improvements can be made. I am very grateful for his time and his passion for mentoring. Without his help, I wouldn&rsquo;t have made as much learning progress in the last project as I had. Thank you, Matt!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halfway Home]]></title>
    <link href="http://codeadventurer.com/2013/12/06/halfway-home"/>
    <updated>2013-12-06T09:05:00-07:00</updated>
    <id>http://codeadventurer.com/2013/12/06/halfway-home</id>
    <content type="html"><![CDATA[<p>Last week marked the halfway point for gSchool. We had our second assessments, using the instructions from the <a href="https://github.com/JumpstartLab/curriculum/blob/master/source/academy/workshops/scrabble_intermediate.markdown">Intermediate Scrabble</a> repo and requirements. <!-- more -->It was a fun challenge, and I&rsquo;ve had some major improvement since the previous assessment. After our assessments, we worked on a Rails tutorial that introduced some more advanced concepts. On Tuesday, the rest of the class worked on Arduino projects, but I had to catch a flight home for the holiday and missed out on that particular hack day. (But I got a few fun things from <a href="http://www.sparkfun.com">Sparkfun</a> on sale that I&rsquo;m going to hack on over Christmas). It felt great to go home for a few days, spend time with family, sleep in my bed, and program for only four hours instead of all day.</p>

<p>This week we got back at it in full force. We&rsquo;re working on <a href="http://tutorials.jumpstartlab.com/projects/fourth_meal.html#functional-requirements">Fourth Meal</a>, building upon Dinner Dash using a codebase that is different from the last project. My group chose the project I worked on last time, which I am grateful for, because I did not feel I understood all of the parts of it before. We started out by refactoring a few pieces of the code, exploring the implementations, deploying a staging and production site, and writing our user stories in <a href="https://www.pivotaltracker.com/s/projects/968652">Pivotal Tracker</a>. We&rsquo;ve been focused on writing proper user stories, understanding our iterations, and dealing with a &ldquo;real&rdquo; client (&ldquo;real&rdquo; meaning Jeff Casimir, acting (in good character)  a demanding client). Our project includes expanding the original codebase to support multi-tenancy (i.e. multiple restaurants in the system with the ability to shop between them independently). I&rsquo;m enjoying the focus on iterations, and sticking to user stories throughout the development process. I believe it&rsquo;s important to delivering value as quickly as possible in an agile way.</p>

<p>Yesterday, we also started a small side project with <a href="http://yacenter.org/">Young Entrepreneurs</a> to help a group of kids launch their online presence for the small businesses they are working on. We have a different group in this project than for Fourth Meal, and are primarily working on design and listening to client needs. Our clients are two young girls (age 7 and 11) that have launched their own body care products line. They are very excited about their products, and it amazes me at how professional they acted for their ages. We had a great brainstorming session with them, and I&rsquo;m looking forward to sharing our ideas and wireframes with them next week for their input.</p>

<p>Halfway through the course, I&rsquo;m feeling excited about my progress and the ways I&rsquo;ve grown along the way. I&rsquo;m excited to see where I stand at the end of the course, and how I continue to progress at my first job out of gSchool. I feel that my ability to collaborate with other developers has vastly improved. Prior to gSchool, I was always a lone coder &mdash; this was not by choice, but due to the work styles of the previous workplaces. I&rsquo;m starting to get better at articulating my thoughts verbally during pair programming sessions, explaining why something makes sense in my head without taking over someone&rsquo;s keyboard, and articulating when I&rsquo;m stuck on a piece of functionality and the thought process behind what I&rsquo;m trying to accomplish and the things I&rsquo;ve already tried that didn&rsquo;t seem to work.</p>

<p>I&rsquo;m excited to continue working on Fourth Meal with my group members, and seeing where we can take this project by the deadline. It will be interesting to see if we have estimated our iterations correctly, and to see if keeping a close eye on Tracker will help us reach our goals and deliver a great final product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dinner Dash, Battleship & Javascript]]></title>
    <link href="http://codeadventurer.com/2013/11/22/dinner-dash"/>
    <updated>2013-11-22T11:07:00-07:00</updated>
    <id>http://codeadventurer.com/2013/11/22/dinner-dash</id>
    <content type="html"><![CDATA[<p>Last week, we finished up our Dinner Dash project in Rails. It was a great first dive into Rails, and I had a lot of fun learning about ActiveRecord, ActiveSupport, and all of the helper methods. <!-- more --> One of the biggest things I learned as we were wrapping up the project and working through our user interface is that in order to do BDD effectively, a project really needs to start off with wireframes. In the last two projects where I have used BDD, it&rsquo;s been a little rough connecting the user interface up in a logical way at the end. It makes much more sense to work through it at the beginning to help guide the final development and make design an easier piece of the puzzle.</p>

<p><img src="http://codeadventurer.com/images/dinner_dash.png" title="Platable" alt="Platable" />
<a href="http://platable.herokuapp.com">(See Platable on Heroku)</a></p>

<p>At the end of last week, we had our second code retreat. We worked through a few 50-minute sessions to build <a href="https://github.com/JumpstartLab/code_retreat">Battleship</a> under different constraints. Unlike our last code retreat, where the scope was much smaller and tests were provided to help guide the design of the API, this time there were only instructions of how the gameplay works. Although the problem is very interesting, it was frustrating to keep switching the context of which piece of the game we were building, and it did not seem like any of my pairs and I got remotely close to solving the piece at hand before we had to delete our code and start over on a new part of the game. However, the exercise has definitely piqued my interest, and I plan on revisiting Battleship on my own to try to build it as a CLI.</p>

<p>This week. we&rsquo;ve been working on JavaScript. It&rsquo;s been great to see how you can test JavaScript using Jasmine, and I&rsquo;ve started to fill in some of the holes in my previous JavaScript knowledge. The best part of the week when we went back to our Dinner Dash projects and started integrating the things we had learned into our projects by updating our cart data with ajax, generating JSON with Rails, and giving live feedback to users purchasing products. The changes we started to implement really began to make the projects shine, and made them feel more like modern web applications.</p>

<p>Overall, on the next project, I&rsquo;d like to integrate more wire framing, a more thought-out user interface, and a bit more of JavaScript to make the project feel more solid.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dashing Down the Rails]]></title>
    <link href="http://codeadventurer.com/2013/11/08/dashing-down-the-rails"/>
    <updated>2013-11-08T10:13:00-07:00</updated>
    <id>http://codeadventurer.com/2013/11/08/dashing-down-the-rails</id>
    <content type="html"><![CDATA[<p>It&rsquo;s amazing to look back on my time here at gSchool and realize that at this point in time, if I were in a shorter bootcamp program, I&rsquo;d be graduating today. <!-- more --> Instead, I&rsquo;m midway through my first Rails project, and learning about all of the features that Rails implements for me through a well-thought-out Ruby backend. When I want to write my own validators or database searches, I start down that journey, but then quickly realize that Rails has already taken care of it for me and that I just need to find the right method in the documentation.</p>

<p>I can imagine what a contrast this is for people who learn as little Ruby as possible in order to get by using all the magic that Rails provides. I think that if I didn&rsquo;t know about the internals of how it worked, I would likely end up in the same boat as when I was hacking things together in Drupal. I have often heard that it is best to know Ruby before working with Rails, and now having experience with both Ruby, and Sinatra, I can see the differences between what Rails provides, and what the language itself does for me, which I think is very important for anyone using any framework.</p>

<p>Our current project is called <a href="http://tutorials.jumpstartlab.com/projects/dinner_dash.html">Dinner Dash</a>, and the task at hand is to build an online ordering system for a restaurant. My group has been working with MiniTest, RackTest &amp; Capybara to use a BDD-style approach to the project, and we have also been using PivotalTracker to track our progress, combined with <a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a> to keep ourselves organized. My mentor works for PivotalLabs, and was very helpful in giving me a few more tips on how to use PivotalTracker to map through our user stories and scheduling our work and expectations.</p>

<p>At the beginning of this project, I was having a hard time mapping my prior knowledge of SQL queries and database relationships to ActiveRecord, but now I have a better grasp on it thanks to two sessions with two different people that helped me understand what was happening. My mentor, Brian Rose from PivotalLabs, helped me understand the entity relationship diagram of our current application by installing the <code>rails-erd</code> gem into our project and generating a PDF of our relationships for me. This was helpful to see, and his explanations helped immensely. I also sat with Jorge and we drew a few diagrams with carefully placed labels to map out a new many-to-many relationship I was creating, and now I think I have a good hold on the whole <code>belongs_to</code>, <code>has_many</code>, <code>is_one_of</code> structure.</p>

<p>I think that besides structuring models, views, and controllers well and understanding ActiveRecord, knowing all of the work that Rails can do might take a little time to learn and master &mdash; but overall I&rsquo;m enjoying working with it. My goals for this project are to get my feet wet with Rails, and start to understand where it can lift some of the burden of common tasks when building applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Rails with PostgreSQL locally]]></title>
    <link href="http://codeadventurer.com/2013/11/02/running-rails-with-postgresql-locally"/>
    <updated>2013-11-02T13:18:00-06:00</updated>
    <id>http://codeadventurer.com/2013/11/02/running-rails-with-postgresql-locally</id>
    <content type="html"><![CDATA[<p>I had a few issues installing Rails for the first time with PostgreSQL locally, and since the problems I was having as a newbie in both were not well-documented on the internet, I thought I&rsquo;d post a rundown of what happened and how I fixed it. <!-- more --></p>

<h3>Installing pgsql with home-brew</h3>

<p>This topic has been covered exhaustively on the web, but the way I did it was to run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew update
</span><span class='line'>$ brew install postgresql</span></code></pre></td></tr></table></div></figure>


<p>Then, I followed the rest of the directions in the terminal to finish my install, and to install the pg gem.</p>

<p><strong><em>Big thing of note:</em></strong> If you are not sure you followed all the directions, and you&rsquo;re getting crazy errors, and you&rsquo;ve already closed your terminal, all is not lost!</p>

<p>You can run <code>brew info postgresql</code> to see the instructions again and double check.</p>

<h3>Fixing your broken PG Connection in Rails</h3>

<p>I decided to start my first rails project with pgsql, because I wanted to give it a try and after using sqlite3 a few times already, I was ready to graduate to something I could actually deploy on Heroku.</p>

<p>So I created my brand-new rails app by running this command in my terminal:</p>

<p><code>rails new blogger -d postgresql</code></p>

<p>Everything looked gravy, until I loaded up <a href="http://localhost:3000">http://localhost:3000</a> and got the big red Rails error with something I did not understand:</p>

<p><code>PG::ConnectionBad (FATAL:  role "blogger" does not exist
):</code></p>

<p>So I found that after doing that, I did some research and found that I needed to run the rake task to actually set up the databases. That&rsquo;s fine by me! So I ran this in my terminal:
<code>rake db:create:all</code></p>

<p>Then, my terminal blew up and the error I would get would be:
<code>FATAL:  role "blogger" does not exist</code></p>

<p>Not knowing much about this, I spent some time searching and found out that I needed to create a new user named the same thing as the user in my <code>database.yml</code> file in the Rails app. Mine happens to be <code>blogger</code>, so I then went into my terminal and ran the following command:
<code>createuser -s -r blogger</code></p>

<p>Then, I ran this command again, this time successfully: <code>rake db:create:all</code></p>

<p>After doing this, and restarting my Rails server, I went back to <a href="http://localhost:3000">http://localhost:3000</a> and I was happily riding the Rails!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping a Website, Building a CMS]]></title>
    <link href="http://codeadventurer.com/2013/11/01/scraping-a-website"/>
    <updated>2013-11-01T09:12:00-06:00</updated>
    <id>http://codeadventurer.com/2013/11/01/scraping-a-website</id>
    <content type="html"><![CDATA[<p>This week, we started a quick-turnaround project in Sinatra called <a href="http://tutorials.jumpstartlab.com/projects/clone_wars.html">Clone Wars</a>. Our challenge was to pick one of five local businesses, build a CMS for their existing types of content, and then scrape their existing website into our database &mdash; all in three days. <!-- more --></p>

<p>On Monday, before the project started, we took a little time to research web scrapers as a class. Afterwards, we did a short <a href="http://tutorials.jumpstartlab.com/topics/mechanize.html">tutorial</a> with the <a href="https://github.com/sparklemotion/mechanize">Mechanize</a> and <a href="https://github.com/sparklemotion/nokogiri">Nokogiri</a> gems, and started scraping different websites.</p>

<p>We were assigned our teams in the afternoon, and got to planning out our project. We got up to speed on what local business we wanted to choose (we went for the <a href="http://thebikedepot.org/">Bike Depot</a>), and started sketching out what the different types of content might look like. We set up our hours of availability as a team, and decided that we wanted to approach the entire project from an acceptance-test-first approach. It was our first time trying it, but we were all very interested in learning how to do it.</p>

<p>We then sat down with Elaine from <a href="http://pivotallabs.com/">Pivotal Labs</a> (and prior gSchool student) to talk about user stories, acceptance tests, and <a href="http://www.pivotaltracker.com/">PivotalTracker</a>. She gave us a lot of good insight on how to use the tool, and soon we started crafting our user stories for the project.</p>

<p>Once we got to the point where we felt we had flushed out the project requirements from a user story perspective, we started digging in. We set up our Sinatra app, and began by writing our first Capybara user test. We ran that first test… and it passed. That didn&rsquo;t make any sense &mdash; we had not set up any routes for the route that we had requested, and certainly did not have any views to display the content that the test requested!</p>

<p>This problem tripped us up for over an hour, when we discovered that in our Gemfile we had declared a test group, but we had not yet set our environment variables in our acceptance test. We also later discovered that looking for content as the first piece of an acceptance test is too many steps into the process &mdash; the first step would be to verify the response code. Finally on our way to a true failing test, we moved to the first piece of the error, and started working our way through the controller, the models, and the views. It was exciting to go through the process and actually successfully go from dummy data to a real database with real data in the matter of a few hours, and then repeat the process over and over again throughout the process.</p>

<p>From my perspective, our team worked incredibly well together. When one of us would get stuck, we&rsquo;d stop and explain what was happening, and why. We all paired (side note: what is the three-person equivalent of pairing? Triading?) throughout the length of the project, since we  had a small enough project that it was likely we might end up with merge conflicts otherwise.</p>

<p>Although we did not completely finish building the CMS in three days, we learned a lot about scraping, dynamic routing, serializing data into databases, and setting up different rack test groups. We had an awesome time trying the acceptace-test-first approach, and stuck together as a group to work through tough problems.</p>

<p>The differences between working in a two person versus a three person group weren&rsquo;t too obvious, since our project was so compact. I can definitely see where a four person group might split into two pairs that rotate, but with three people at different levels in the program, and with a small spec and a short timeframe, it seemed more appropriate to stick together and learn together.</p>

<p>If we had another week to work on Clone Wars, we&rsquo;d likely get our authorization working correctly, and work on integrating more functionality into the CMS &mdash; including the addition of news items, products for sale, and a volunteer database.</p>

<p>Overall, I was extremely satisfied with where we got with our project because I felt that we built it well, communicated with each other clearly, and have a solid foundation to build upon when we choose to revisit the project.</p>

<p>To see the project in action, you can visit George&rsquo;s <a href="https://github.com/Egogre/CloneWarz">GitHub repository</a>, clone the project, run <code>bundle</code>, then run <code>rackup</code> in your terminal, and visit your localhost for a peek at the project. At localhost/admin, you can view our CMS functionality. Make sure to take a look at our test suite, and run the tests by running the <code>rake</code> command in your terminal. Then marvel at the beautiful rainbow of passing tests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Apps &amp; Code Retreats]]></title>
    <link href="http://codeadventurer.com/2013/10/28/web-apps-and-code-retreats"/>
    <updated>2013-10-28T09:22:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/28/web-apps-and-code-retreats</id>
    <content type="html"><![CDATA[<p>Our latest project, finished last week, was <a href="http://tutorials.jumpstartlab.com/projects/idea_box.html">IdeaBox</a>. As mentioned in a previous post, we started building the project from a tutorial, without tests, and went from there. <!-- more --> I added unit tests before the weekend, and then started using Capybara for acceptance tests last. After watching the <a href="http://www.youtube.com/watch?v=BG_DDUD4M9E">RailsConf talk on BDD</a>, I realized I&rsquo;d much rather work from the outside-in approach demonstrated in the talk.*</p>

<p>After building through IdeaBox on our own, we presented the projects on Thursday afternoon. It was great to see everybody&rsquo;s work, and see how far they got in the project, learn about their &ldquo;a-ha!&rdquo; moments, and also hear about pain points. It was great to see a project starting to turn out differently &mdash; I&rsquo;m sure as the course progresses, we will end up with vastly different projects than in the first third of the course.</p>

<p>On Friday, we all left the classroom and Galvanize to have an all-day code retreat. We made our way to the <a href="http://www.rivernorthart.com/">RiNo</a> part of Denver and spent the day inside of <a href="https://www.facebook.com/thesourcedenver">The Source</a>, a rehabbed warehouse-turned-young-money-shopping-facility. (I&rsquo;m probably totally wrong, but that&rsquo;s the best way I can describe it). We spent the day pairing in 30 minute time blocks, switching partners after every time block, and working on the same problem from scratch in a different way. In the morning, we worked through the <a href="https://github.com/JumpstartLab/code_retreat/tree/master/beer">Beer Song</a> problem spec, and in the afternoon we worked through the <a href="https://github.com/JumpstartLab/code_retreat/tree/master/robot">Robot</a> spec. Each was interesting in it&rsquo;s own way, and both tested fundamentals &mdash; working with strings, or working with arrays and hashes.</p>

<p>It was exciting to work with so many different classmates, and come up with so many different solutions, based on different contraints. I learned about how to build a program with no conditional statements (since <code>if</code> is not object oriented), learned about traversing through an array using modulo math, and various other amazing tidbits. I had a lot of fun, learned a bunch, and left at the end of the day completely exhausted, but mentally invigorated. I hope that I can continue to participate in code retreats beyond gSchool &mdash; it seems like an amazing way to keep developers sharp and practice different pairing techniques.</p>

<p>I&rsquo;m really enjoying being back in web territory. I have a foundational understanding some things already, so I can focus on testing the applications, using Ruby, and building things in a TDD (or BDD) fashion. I definitely like Sinatra, and that it&rsquo;s lightweight enough that you can choose your own design pattern, your own database ORM, and pretty much everything inbetween. In contrast, I started playing with Rails for the first time last week, and I&rsquo;m not sure how I feel about how much work it does for the developer. I&rsquo;m sure I&rsquo;ll change my mind once I know how to build everything from scratch really well and don&rsquo;t want to always do it myself, but for now I enjoy learning how to implement all of the pieces.</p>

<hr />

<p><strong><em>Side note:</em></strong>
* My reason for liking the idea of BDD comes from the various times I&rsquo;ve been bitten by not having a way to test the entire experience from a user perspective. Our workload at my previous position was so high that often the developers would run through scenarios at a high level, test that things worked on their own machines, and ship the code to production. Often, many things went wrong in this process, sometimes after the client had already seen the problems themselves. We had started out with QA testers, but over time the people in the company that did QA on development projects were eventually reassigned to other things, leaving the developers without dedicated QA resources, and no time to do testing themselves. I would have loved to be able to do BDD back then, but then again, I&rsquo;m just learning about it now! I think I might give this approach a shot in a future project at gSchool, just to see how it differs from starting with unit tests first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Your Weakness]]></title>
    <link href="http://codeadventurer.com/2013/10/26/naming-your-weakness"/>
    <updated>2013-10-26T13:28:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/26/naming-your-weakness</id>
    <content type="html"><![CDATA[<p>This past week at gSchool, we had our first assessment. We were offered a problem, in this case, the <a href="http://tutorials.jumpstartlab.com/academy/workshops/scrabble.html">building blocks of the Scrabble game</a>, which included a short guide <!-- more -->that informed us of some of the API decisions based on the expected input and output of the program, and we sat down with one of our three instructors for 40 minutes, while they watched and listened to us work through the problem.</p>

<p>As an exercise in Enumerators a few weeks ago, I took a similar look at the beginnings of the Scrabble exercise (counting word scores), so I did not spend too much time &ldquo;preparing&rdquo; for the assessment. I did not want to memorize how to solve the problem, because I wanted a raw feel to how my process works from my instructors&#8217; perspective, so that I knew what I needed to work on improving.</p>

<p>Honestly, I was a little surprised by how it went. Although I got much further in solving the problem (with a little guidance in the right direction when I steered off course), my happiness with progress was not the purpose of the review. My reviewer pointed out that I had difficulties breaking down problems into their smaller pieces, and writing tests for these smaller pieces prior to attempting to solve the problem with code. I was using tests to verify my solutions as I busted through a problem, instead of using smaller tests along the way to drive the solutions.</p>

<p>I can memorize all the syntax out there, that has never been a problem for me. But can I use it efficiently and effectively? Not as well as I should. I was the student who shirked away from math courses, but loved science classes. I can tell you how many things work, recite hundreds of odd facts, but can I break down a logical pathway of WHY they work that way, and apply it to something else? Not always.</p>

<p>I thought I came to gSchool to learn Ruby best practices, learn agile and TDD, and make sure that I don&rsquo;t get lost in the world of StackOverflow and Google when I get stuck. But really, what I&rsquo;m starting to realize is that beyond those things, I came to gSchool to learn algorithmic thinking.</p>

<p>Learning to program is easy if you have a good foundation of algorithmic thinking, but this is something I never knew until this week. I had never heard the term until my assessment, and after the assessment, I wanted to do everything in my power to learn more about it, how to develop it, and find problems to practice.</p>

<p>My research on the matter leads me to conclude this:</p>

<ul>
<li>Repetition is how this skill is built</li>
<li>Smaller exercises are easier to digest</li>
<li>Math problems are actually great ways of building this skill</li>
<li>If you were a math major or minor, you&rsquo;ve probably mastered this already</li>
</ul>


<p>I guess it&rsquo;s finally time to face my fears of math so that I can become a better programmer.</p>

<p>As resources to help me practice building this skill, I&rsquo;m going to use various websites to work through at least a problem a day. <a href="http://projecteuler.net/">ProjectEuler</a> actually fits all three of the criteria above for how to build the skill. The problems are small, the build on one another, and they are math-focused. I&rsquo;ve found another, <a href="http://rosalind.info/problems/list-view/">Rosalind</a>, which is focused on BioInformatics, and seems promising for not quite as math-heavy solutions. Another interesting site is <a href="http://rubyquiz.com/">RubyQuiz</a>, but this one might not be quite as helpful, as many of the quizzes seem to already contain a problem break-down spelled out for the user.</p>

<p>My goal is to look back at the assessment at the end of this course, and inherently know how to break down a problem into it&rsquo;s smallest parts. I hope to marvel at how easily I can solve this problem, and many others &mdash; not through memorizing the solution, but by knowing how to work through the details.</p>

<hr />

<h4>Asides</h4>

<p>I also found <a href="http://www.google.com/edu/computational-thinking/index.html">this resource</a>, provided by Google, for any educators looking to teach kids math through the use of computational thinking. I may go through some of the exercises myself, even if they are for grades 6-12!</p>

<p><a href="https://www.udacity.com/course/cs215">This free course from Udacity</a> also explains algorithms through social networks. I&rsquo;ve started working through it and it seems like it will be helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to the land of HTTP requests]]></title>
    <link href="http://codeadventurer.com/2013/10/18/back-to-the-land-of-http-requests"/>
    <updated>2013-10-18T08:58:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/18/back-to-the-land-of-http-requests</id>
    <content type="html"><![CDATA[<p>This week, we started using Sinatra to build a web application. At the start of the week, we built <a href="http://tutorials.jumpstartlab.com/projects/web_guesser.html">WebGuesser</a>, a random-number guessing site <!--more -->that allows for a user to guess the number, and gives feedback on how close they are. <a href="http://agile-peak-6795.herokuapp.com/">My version</a> has a few bugs. For instance, if two people are accessing the site at the same time and playing, each person&rsquo;s guess counts towards the total, so you may only guess once or twice and be presented with a &ldquo;Too many guesses&rdquo; message. This can easily be solved with session cookies, but I haven&rsquo;t gotten around to refactoring yet. I&rsquo;m sure I&rsquo;ll get a chance to come back and make that short project better.</p>

<p>We also started building <a href="http://tutorials.jumpstartlab.com/projects/idea_box.html">IdeaBox</a>, a place for someone to jot down ideas and store them. Originally, I just worked through the tutorial to have an understanding of the application, and then I implemented a few changes before writing tests. It was hard to work through the tutorial to understand what was happening and try to write tests at the same time, but now that I have gone back and written tests for the application, I am much more comfortable with moving forward with implementing the extensions.</p>

<p>I actually feel that writing the tests gave me a better understanding of each piece of the application. I definitely felt the pain of not having tests when I had decided to change how IDs are generated and add them to the YAML database, without any tests to help me spot where things were breaking. I&rsquo;m still shaky on the best ways to test web applications from the acceptance-test level, but I&rsquo;ve got five more months to nail that piece!</p>

<p>What I like about this project is that we are working at our own pace. Some people will have amazing full-blown web apps with design, users, SMS capability, etc. at the end of this, others will have gone through the basic implementation, and everyone will have a better understanding of how web applications work. It&rsquo;s also been great to be in groups of four because we are all at different stages of the project, and can ask for help in specific places, instead of being dragged along by a stronger pair.</p>

<p>Next week, we&rsquo;re going to have our first assessment. I think we&rsquo;ll be paired with one of our instructors for the length of the assessment, and will have to build a program while being observed. This sounds a little intimidating, but the instructors are also there to provide feedback on our thought process and implementation, which I think is one of the coolest opportunities in the program. I think I&rsquo;ll be overall in a good place during the assessment, and I&rsquo;m very eager to find out what I need to spend more time learning and understanding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A week of focus is worth a thousand projects]]></title>
    <link href="http://codeadventurer.com/2013/10/11/a-week-of-focus-is-worth-a-thousand-projects"/>
    <updated>2013-10-11T09:01:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/11/a-week-of-focus-is-worth-a-thousand-projects</id>
    <content type="html"><![CDATA[<p>This past week at gSchool, we broke out into groups based on how comfortable we felt with the projects we had done and the techniques and methods used in them. <!-- more --> We had an emerging group, a progress group, and an advanced group. In these groups, we would focus on taking what we knew, building on it, and pushing ourselves past our comfort levels.</p>

<p>I felt like I could get some benefit out of the exercises the emerging group has been working on (like locking in various ways of using hashes, arrays, and enumerators), but I also had a feeling that I might have a good enough grasp on those things that I could push myself in a different way. Instead, I chose to join in with Jeff&rsquo;s group, the progress group, to take a fresh look at our first paired project from a few weeks back, <a href="http://tutorials.jumpstartlab.com/projects/event_reporter.html">EventReporter</a>.</p>

<p>The first time around this project, I had been tackling it from the provided test routes, one item at the time. I also had chosen not to work closely with my pair, because he had completed the assignment several times before and was beyond my level in terms of understanding how to do it, and I had wanted to learn how to go about it myself instead of watching someone code things I did not understand. If I had actually paired with him, I probably would have had the project completed, but I&rsquo;m not sure if I would have learned as much. So originally, my EventReporter was not complete, nor very pretty.</p>

<p>It was great to step through the thought process with Jeff this week. He helped us understand how to break down the problem, how to start with an MVP, how to create test doubles (or stubs) so that our tests were independent of each other (in the case of unit tests), and to build small pieces of a project and get one piece working at a time using test-driven development. He also helped us understand when to use text fixtures, and when to use hard-coded data in tests.</p>

<p>Throughout the week, we tacked a method or two a day, writing the tests, talking through the process, and slowly chipping away at the requirements. We started with a much better separation of concerns than the first time around (when many of us had everything in one giant method, in one giant file). It felt great to bring in all of our pieces yesterday, and write one controller that brought it all to life as a command line interface. After a little debugging, many of us had an EventReporter that worked, in half of the time with twice the quality of the first round.</p>

<p>Although I&rsquo;m not yet a master of creating beautiful, small, concise methods, and knowing when to use <code>send</code> instead of an <code>if</code> statement, I have a great example with commit messages at every step to reference when I need to dig in and remember how we did things.</p>

<p>It was great to work with a group at my same level of understanding for the week, and not be derailed by questions that are either to basic or too advanced for our current skillset. I&rsquo;m not sure if I&rsquo;d want the entire 24 weeks to work this way, but I do think that pairing with someone of a similar skill level is helpful. I have found that when I have been paired with someone who has been programming in Ruby for longer than the course, that they often do not explain their thought process and just forge ahead to get done with things, instead of hanging back to bring the person with less experience up to their level. I believe the true purpose of pairing is to slow down, explain your thought process, and pair through a problem together. If more advanced students were willing to do this without taking control of a project, I&rsquo;d be happy to be paired with them. Otherwise, I&rsquo;d rather stay with someone who is at the same level of understanding as me.</p>

<p>After this week of focus, which has helped me immensely in terms of understanding how to do things the right way (moreso than working independently on projects without much instruction) I&rsquo;m excited that we&rsquo;re digging into web applications next week. Although I&rsquo;ve built small web systems in PHP before, I know I have a lot to learn and am eager to get on the right path.</p>

<p>(<strong>Title disclaimer</strong>: *Ok, so perhaps more like worth two projects)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turtles & Mentors]]></title>
    <link href="http://codeadventurer.com/2013/10/04/learning-from-a-mentor"/>
    <updated>2013-10-04T20:41:00-06:00</updated>
    <id>http://codeadventurer.com/2013/10/04/learning-from-a-mentor</id>
    <content type="html"><![CDATA[<p>Our most recent project at gSchool, called <a href="http://tutorials.jumpstartlab.com/projects/sales_engine.html">SalesEngine</a>, was quite a stretch for a lot of us in the class. <!-- more --> Beyond the complexity of EventReporter, we had not had any time to recover from that project, overview the lessons learned, and reinforce the most important concepts from from the project. Instead, we jumped right into the next project, some of us without even having touched EventReporter, others with only half of the project completed.</p>

<p>With our new pairs, we dove into the requirements. The project looked massive at first glance, but slowly we started to follow through the requirements (with very handy method and class name requirement) and made progress.</p>

<p>Our progress skidded to a halt once we hit the relationships piece. Although I understand databases, foreign key relationships and how to get my data in and out of MySQL using PHP, I had no idea how to get my objects to pass around stored information to each other in Ruby.</p>

<p>My partner was equally confused. We stepped through an explanation with Jorge on Friday, and spent the weekend putting it together. We took the approach of calling our main interface class, SalesEngine, from every other piece of the program, so that we could reach through SalesEngine down into our data storage collections (called Repositories in this project). Apparently, we didn&rsquo;t understand the Object Model, but then again we haven&rsquo;t talked much about the Object Model except for the fact that everything is an object.</p>

<p>Having completed our relationships piece exactly the wrong way, we were on to building the pieces of business intelligence into the program. Suddenly we had to actually make our idea of the relationships make sense in our heads to get these pieces working, and suddenly everything seemed to be running in circles. On Monday, our instructor Katrina helped us understand where we went wrong, and showed us how to pass through a copy of SalesEngine (by using <code>self</code>) to each repository, and in turn to each individual piece of the program.</p>

<p>We spent a good deal of time of Monday refactoring our relationship model, and finally were back to our original issue: how do we grab and compare data stored in different places in the application?</p>

<p>After some nudging and help from various instructors, we started to understand how things were supposed to work. On Tuesday, with two days to go, we got to building the first few pieces of business intelligence. I sat down to read the piece on the first item, and this is what my psuedocode looked like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">test_it_can_find_the_merchant_with_the_most_x_revenue</span>
</span><span class='line'>    <span class="n">engine</span> <span class="o">=</span> <span class="no">SalesEngine</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;./test/fixtures&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># find all invoices by merchant_id</span>
</span><span class='line'>    <span class="c1"># then find each invoice id for the merchant_id</span>
</span><span class='line'>    <span class="c1"># use invoice_id to call invoice_items that match</span>
</span><span class='line'>    <span class="c1"># compare these invoice_id&#39;s to tranactions invoice_id </span>
</span><span class='line'>    <span class="c1"># only use the ids that have result == success</span>
</span><span class='line'>    <span class="c1"># take the quantitiy of the items &amp; multiply by the price</span>
</span><span class='line'>    <span class="c1"># process the price into BigDecimal (don&#39;t use Float)</span>
</span><span class='line'>    <span class="c1"># store that in an array</span>
</span><span class='line'>    <span class="c1"># sort the array on .sort or some similar array method</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end, this pseudocode actually didn&rsquo;t help me out at all. It wasn&rsquo;t until I stepped back and read through
all of the requirements that I realized that starting at the top of the list would not get us to the final endpoint. In order to report the top <code>x</code> merchants based on revenue, we would have to create helper classes associated with invoices and transactions.</p>

<p>Eventually, by the end of the night we had tested and created methods for our individual <code>Merchant</code>, <code>Invoice</code>, <code>Transaction</code>, and <code>MerchantRepository</code> classes to help us get some sort of response from the system.</p>

<p>But there was a bug. And that it turns out that wherever there is one bug, there are many more in hiding. It was 4:30, and the instructors were leaving for the day, and we were stuck.</p>

<p>Thankfully, <a href="https://twitter.com/corylanou">Cory LaNou</a> and <a href="https://twitter.com/levicook">Levi Cook</a>, founders and developers at <a href="http://www.supportlocal.com/">SupportLocal</a>, offer their time and energy for help on Tuesday evenings to gSchool students.</p>

<p>Cory spent four hours with my partner and I that night, showing us how to debug a program, and exploring with us where things were going wrong. Besides various errors that we have made using core methods, we also discovered that our test data set was completely useless without our foreign keys matching up. It took us that fours hours to get two tests to pass.</p>

<p>I couldn&rsquo;t believe how much time he had spent with us, going around in circles, walking us through debugging, and helping us find the issues in our program. I would love it if every mentor out there were as patient as Cory.</p>

<p>Although in the end we did not finish SalesEngine, I believe the lessons we learned from Cory about debugging, and the persistence needed when tracking down issues, were monumental, and very important to the success of our future projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning from the Community]]></title>
    <link href="http://codeadventurer.com/2013/09/29/learning-from-the-community"/>
    <updated>2013-09-29T18:40:00-06:00</updated>
    <id>http://codeadventurer.com/2013/09/29/learning-from-the-community</id>
    <content type="html"><![CDATA[<p>This past week of gSchool, we got our first outside-of-the-classroom introductions to the Ruby community by attending <a href="http://rockymtnruby.com/">Rocky Mountain Ruby Conf</a><!-- more -->, and also by having a personal session with <a href="https://github.com/wayneeseguin">Wayne E. Seguin</a>, the original creator of RVM.</p>

<p>Wayne taught us a few important lessons, but the most important advice I heard is to know yourself, and to know how to deal with yourself. As a similar work-a-holic, when I am at home (aka: not in gSchool, where work-a-holicism is somewhat of a neccessity), I tend to spend hours learning new things after work, and ignoring my friends and family. Although great for keeping up with the current tech trends, this tends to wear on my personal relationships. To combat this, Wayne has set aside the 5pm to 8pm block of time as &ldquo;family time&rdquo;, and has alerted all of his friends, the open source projects he works on, and his colleagues of this rule. He sticks to it, and with this expectation, he does not let anyone down. His family knows his focus is on them during that time, and his co-collaborators respect that he is away and unavailable to work during that time of day.</p>

<p>At Rocky Mountain Ruby, I learned a lot about the community. Aside from the stickers, soft tshirts, and good food, the presenters where really knowledgable about their topics. I have attended conferences before, but I have never been to a conference with only one track. This was interesting to me, because although I didn&rsquo;t have enough practical knowledge on the subject, I was forced to hear about threading, Go (the language), and 17 databases that I&rsquo;ve never heard of before, I listened throughout the presentations and was able to learn something about the subject. Coming out of the conference, I was amazed at how much I had understood about every presentation. It goes to show that if you listen and try to understand, you will learn.*</p>

<p>Learning from the community, regardless of whether it is the Ruby community, or another community in general, is a very interesting experience. If you listen carefully, you hear about the triumphs, the losses, the intersections of people and pride, and the lessons that others have learned. I&rsquo;ve found that it is wise to listen hard during these anecdotes, because those that wore this path before us have made mistakes (or discoveries) that we can benefit from knowing, and hopefully apply to our own individual journeys.</p>

<p><strong>*Pro-tip:</strong> Sit in the front during conferences and presentations. If you have any sense of shame left in you, you won&rsquo;t be as compelled to whip open your laptop or check your phone. And without distractions, there is only one thing left to do: listen to the presentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning is Effin' Hard]]></title>
    <link href="http://codeadventurer.com/2013/09/20/learning-is-effin-hard"/>
    <updated>2013-09-20T09:04:00-06:00</updated>
    <id>http://codeadventurer.com/2013/09/20/learning-is-effin-hard</id>
    <content type="html"><![CDATA[<p>Two days into building Event Reporter (you can find the project guidelines <a href="http://tutorials.jumpstartlab.com/projects/event_reporter.html">here</a>), I was flummoxed. <!-- more -->I&rsquo;d only been programming in Ruby for a little over a week, and we were diving head-first into test-driven development, while programming our first project without any training wheels. I came to Katrina, our super-heroine, molecular-biologist-turned-programmer instructor, and showed her my codebase. I was trying hard to separate concerns, build different classes, and keep every class and every test in its own file. This was starting to confuse me, and I was starting to lose sight of how to connect all the pieces back to one another. She took a few looks at what I had done, and asked me to <code>rm -rf</code> everything. All of it.</p>

<p>I looked at her in disbelief, explained that this was hours worth of work (even though really it looked like there wasn&rsquo;t much there)… and then complied. And cried a little inside.</p>

<p>Starting with a blank slate, and just two files this time &ndash; one for all of my classes, and one for all of my tests &ndash; I looked at the requirements and started building from the first test case, &ldquo;Happy Path&rdquo;. I had one day left before the project was done, and I was starting to stress out. Why was this so hard? Every class I&rsquo;ve ever taken, every passion I have pursued, has come easily to me. I can memorize insane facts, make connections between farming and management, lead groups, organize events, cook awesome organic meals, fix bicycles, juggle, live in yurts… and this project is the thing that is going to show me who is boss? I couldn&rsquo;t handle it.</p>

<p>With every hour that went by, as some tests failed and somewhere along the way, a few passed, I kept getting more and more frustrated. I started to doubt being ever able to call myself a web developer in the past. If I couldn&rsquo;t get this basic project to work, how was I going to move on to the next one? At 8:30pm the night before the project was due, I had only four methods that could pass tests. I shut my laptop, realized there was no way I could finish in time, and went to sleep.</p>

<p>I awoke at 3:30am from dreams where I was expertly solving Event Reporter, one passing test at a time, and quickly got out my laptop to try to recreate what was I was programming in my dreams. I cranked out the tests, and slowly started realizing that all of it was gibberish. Dream-state me wasn&rsquo;t actually expertly solving anything, although it seemed like it. But, I was awake anyway, so I hit the gym at 4am, got through my workout, and decided to come to gSchool early and try again.</p>

<p>I worked through my code for a little while before Katrina showed up (she has some crazy schedule where she goes to bed at 8pm and gets to work at 5am), and helped me back away from the ledge of jumping off of the programmer cliff. She looked at me and said, &ldquo;Learning is elfin&#8217; hard.&rdquo; Coming from a molecular biologist, I must have actually believed her, because an hour and  half later, after talking through my code and my struggles, I started to feel better about the project (even through I was still nowhere near done).</p>

<p>I&rsquo;m still not done today, but I have an idea of where I&rsquo;m going. Talking with Katrina, Jorge, and Franklin during different pieces, and various colorful feelings ranging from rage to anger to depression to self-hate (gosh, I never knew programming could bring out so much in me) really helped me understand that all of us at gSchool are used to being good at things. And a lot of us are struggling &mdash; not just with the syntax and the TDD mindset, but also with this ego-crushing feeling of failure.</p>

<p>And then I have to remind myself that today is day 10 of gSchool. And there are still five and a half months to go. Two weeks ago, I had never written a test for one of my programs. I&rsquo;ve learned a lot in this time &mdash; not only about Ruby, but about myself, my classmates, and the human spirit.</p>

<p>Thank you, gSchool, for showing me that learning a new programming language can be one of the most amazing things to teach me about myself.</p>

<p>If you&rsquo;re interested in the spiderweb of code I&rsquo;ve been building for this project, you can find my codebase on <a href="https://github.com/pzula/event_reporter">GitHub</a>. Feel free to let me know what you think, either about the code, or about my journey, or about similar experiences you&rsquo;ve had in the comments section.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: The Carolina Morning Zen Office Floor Desk]]></title>
    <link href="http://codeadventurer.com/2013/09/10/review-carolina-morning-zen-office"/>
    <updated>2013-09-10T22:02:00-06:00</updated>
    <id>http://codeadventurer.com/2013/09/10/review-carolina-morning-zen-office</id>
    <content type="html"><![CDATA[<p>In the previous post, I spoke about getting your computer ready for you to work, but I didn&rsquo;t spend much time talking about getting <strong>yourself</strong> ready to work. In a series of posts, I will cover tools beyond your computer that can help you be a better developer.</p>

<!-- more -->


<p>As developers, we spend a lot of time at our computers. We obsess over the technical specifications of the newest laptop, and discuss the benefits and drawbacks of the newest library that was released, but we don&rsquo;t spend much time talking about how we &mdash; as human beings in physical bodies &mdash; interact with the tools of our trade.</p>

<p>Generally speaking, these days many programmers are working on powerful, lightweight laptops. The freedom of being able to work from anywhere &mdash; a coffee shop, an airport, or even sitting on the couch &mdash; has led many of us to ditch the notion of large, noisy computer towers in favor of the ultrabook.</p>

<p>As we put away our gargantuan computers of years past, we also traded in our ergonomic desk setups for hunched-over, strained-neck, cramped sitting styles in laps and on table-tops to use our primary tool of the trade. Gone are the keyboard trays, the gel-padded wrist protectors, and the $500 chairs.</p>

<p>The issue at hand is that laptop keyboards are attached to the screen of the laptop, which, when seated at a regular desk, forces the laptop user to look down. This posture consequently rounds the shoulders in wards towards the chest. Keeping the neck and shoulders in this unnatural position for hours at a time can lead to long-term injuries, including RSI (repetitive stress injury), nerve damage, migraines, and more. (For all of the potential risks, ask a professional chiropractor or musculoskeletal specialist).</p>

<p><img src="http://www.codeadventurer.com/images/laptop_positions.gif" alt="Three potential postures with a laptop" /></p>

<p>As you can see in the figure(1) above, there seems to be no decent way to achieve good posture while using a laptop without additional peripherals.</p>

<p>Enter <a href="http://www.zafu.net/">Carolina Morning Designs</a>* and the Japenese-inspired minimalist furniture that Linsi Deyo and her partner Patrick Clark offer for sale on their website. Linsi and Patrick have designed the <a href="http://www.zafu.net/zenoffice.html">Zen Office</a>, a desk that keeps you seated close to the floor and re-stacks your skeletal structure so that your back stays straight, your head is not bent over, and your arms are in a comfortable typing position.</p>

<p><img src="http://www.codeadventurer.com/images/zen_desk.jpg" alt="Using the Carolina Morning Designs Zen Office" /></p>

<p>This type of seating is called &ldquo;active sitting&rdquo;, as you engage the core muscles of your abdomen and back to help you stay seated. It is uncomfortable to take a slouched position at the Zen Office.</p>

<p>In addition to the floor position, it is also possible for the Zen Office to be repurposed in other ways. If you prefer to switch between sitting and standing, you can easily use the Zen Office along with a wireless keyboard and mouse to accomplish this.</p>

<p><img src="http://www.codeadventurer.com/images/zen_desk_sitting.jpg" alt="Using the Carolina Morning Designs Zen Office While Sitting" /></p>

<p>Having used a gamut of seating situations for computer work, ranging from cardboard-box standing desks, to $22 Ikea hacks for a standing desk, and even yoga balls for active sitting, I can say with confidence that I don&rsquo;t think I will ever need another desk besides the Carolina Mornings Design Zen Office. Since it breaks back down to two small packages, with no tools required for assembly, I can take it anywhere, and whenever I get tired in one position, I can quickly move to another.</p>

<p><img src="http://www.codeadventurer.com/images/zen_desk_standing.jpg" alt="Using the Carolina Morning Designs Zen Office While Standing" /></p>

<p>What sort of sitting and standing arrangements have you used for computer work? Do you alternate throughout the day, or just stay in one position?</p>

<hr />

<p>*I found Carolina Morning Designs while researching sleeping on the floor, as I have been living in a yurt again and in my packing for gSchool have refused to bring a mattress or purchase a new one. If you love sleeping on a firm surface, as I do, check out their modular platform bedframes and other minimalistic sleeping surfaces.</p>

<p>1: Griffin, Timothy, &ldquo;The Adaptive Laptop&rdquo;. October, 2001. Timothy Griffin, Industrial Design Program, The University of Calgary. <a href="http://tim.griffins.ca/writings/mdp-intro">http://tim.griffins.ca/writings/mdp-intro</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting a New Development Environment Up &amp; Running on Mac OSX]]></title>
    <link href="http://codeadventurer.com/2013/09/05/getting-a-new-development-environment-up-and-running-on-mac-osx"/>
    <updated>2013-09-05T21:14:00-06:00</updated>
    <id>http://codeadventurer.com/2013/09/05/getting-a-new-development-environment-up-and-running-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Getting a new computer can be fun, but it also means a lot of work. Between running into bugs, new versions of software running amok, and documentation from various sources on the big, bad internet just not lining up, it can quickly go from being fun to just being plain frustrating.</p>

<!-- more -->


<p></p>

<p>I had a few of those moments myself in the last couple days, so I thought I&rsquo;d share with other journeymen and women some of the core items I get set up on a new machine. Perhaps a few of the snippets may help you get out of a snag, or maybe you&rsquo;ll find a new tool to love.</p>

<h2>In a loose order of importance</h2>

<h3>Basic Apps</h3>

<ol>
<li><p>The very first thing I installed was <a href="http://www.alfredapp.com/">Alfred</a>. If you love Spotlight, go ahead and stick with it, but I love the flexibility of Alfred for getting around, doing math for me, and lots of other tasks that usually take more than two keystrokes.</p></li>
<li><p><a href="http://www.mozilla.org/en-US/firefox/fx/#desktop">Firefox</a> &amp; <a href="https://www.google.com/intl/en/chrome/browser/">Chrome</a>, to have browsers to test in. I primarily use Chrome in my daily work, and only every touch Safari for testing.</p></li>
<li><p>A few extensions for Firefox and Chrome include <a href="http://getpocket.com">Pocket</a> (for saving things to read later), <a href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/">Web Developer Toolbar</a>, <a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/?src=search">Firebug</a>, and <a href="https://chrome.google.com/webstore/detail/personal-blocklist-by-goo/nolijncfnkgaikbjbdaogikpmpbdcdef?hl=en">Personal Blocklist for Chrome</a> (this one helps me block anything by w3cschools.com, because most of the time, that site does not promote best practices)</p></li>
<li><p><a href="http://www.evernote.com">Evernote</a> helps me keep track of everything &mdash; from grocery lists to bug fixes. Whenever I think of something, I can pop open Evernote, and be sure that when I need to come back to it, I can access it from anywhere. I love this app, and it&rsquo;s free!</p></li>
<li><p><a href="http://www.skype.com">Skype</a> helps me keep in touch with other developers, friends, and family around the world.</p></li>
</ol>


<h3>Developer&rsquo;s choice</h3>

<ol>
<li><p><a href="http://www.sublimetext.com">Sublime Text 2</a> is my editor of choice. Although I know there are many proponents of Vi/Vim and other non-GUI editors, my focus right now is on learning to become a better programmer. I&rsquo;ll focus on learning those later. Here are my favorite Sublime Text 2 packages:</p>

<ul>
<li><a href="http://docs.emmet.io/">Emmet</a></li>
<li><a href="http://net.tutsplus.com/articles/news/introducing-nettuts-fetch/">NetTuts Fetch</a></li>
<li><a href="https://tutsplus.com/lesson/lightning-fast-folder-and-file-creation/">Advanced New File</a></li>
<li><a href="https://tutsplus.com/lesson/sidebar-enhancements/">Sidebar Enhancements</a></li>
<li><a href="https://github.com/SublimeLinter/SublimeLinter">Sublime Linter</a></li>
<li>I also enable Sublime to be opened from the command line (this is where the Vim users scoff).
Run this in your terminal: <code>ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" /bin/subl
</code>   Now you will be able to open any file from the Terminal with <code>$ subl filename-here.html</code></li>
</ul>
</li>
<li><p>You can use Sublime Text 2 as your Markdown editor for blog posts, but I prefer the immediate feedback of <a href="http://mouapp.com">Mou</a>.</p>

<ul>
<li>I find that I&rsquo;m often at the command line wanting to use Mou, but don&rsquo;t feel like going through the GUI to open a new file or the app itself, so I set up an alias in my <code>.bash_profile</code> as follows: <code>alias mou="open /Applications/Mou.app"</code>. Now whenever I <code>rake</code> a new post in Octopress, I can immediately open it with Mou without having to take my hands off the keyboard.</li>
</ul>
</li>
</ol>


<h3>Terminal modifications</h3>

<ol>
<li><p>Speaking of the command line, I have a few little modifications I like to make to the Terminal in order to make it easier for me to use. Take what you want, leave what you don&rsquo;t.</p>

<ul>
<li>First, I update my Terminal theme. I personally like <a href="https://github.com/altercation/solarized">Solarized</a>, as it is easy on the eyes. <a href="http://noiseandheat.com/blog/2011/12/os-x-lion-terminal-colours/">Mac installation instructions here</a></li>
<li><p>A typical install of OS X won&rsquo;t create a <code>.bash_profile</code> for you. When you want to run functions from your command line, this is a must-have:</p>

<ul>
<li>Start up Terminal</li>
<li>Type <code>cd ~/</code> to go to your home folder</li>
<li>Type <code>touch .bash_profile</code> to create your new file.</li>
<li>Edit .bash_profile with your favorite editor (or you can just type <code>open -e .bash_profile</code> to open it in TextEdit.</li>
<li>Type <code>. .bash_profile</code> to reload .bash_profile and update any functions you add.</li>
</ul>
</li>
<li><p>I then update the Terminal to show the full path of where I am at. This helps me when I&rsquo;m working on programs that might have similar file names in different folders.</p>

<ul>
<li>In ~.bash_profile, add: <code>export PS1='\u@\H:\w$</code></li>
<li>Then restart bash</li>
</ul>
</li>
<li><p>I also like my file listings to be colorful, so I add the following items to my <code>.bash_profile</code>:</p>

<ul>
<li><code>export CLICOLOR=1</code></li>
<li><code>export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx</code> (This color set works well with the Solarized bash theme)</li>
</ul>
</li>
</ul>
</li>
</ol>


<h3>Development environment</h3>

<p>Now that my basic tools are installed, I get into installing my development tools specific to Ruby and my <a href="http://gschool.it">gSchool</a> learning needs.</p>

<ol>
<li>I got my Ruby development environment all set up and worked through the nuances with <a href="http://twitter.com/kytrinyx">Katrina Owen</a> from Jumpstart Lab. <a href="http://tutorials.jumpstartlab.com/topics/environment/environment.html">Here are the updated instructions</a>, in great detail.</li>
<li>I also copied over my ssh key pairs from my old machine to ensure I could continue using them for my GitHub and Heroku accounts. Remember to copy permissions for all files in the folder as well!</li>
<li>I also go to my home directory and <code>mkdir</code> a Sites folder &mdash; this restores the functionality of the Sites folder that used to work in previous OSX versions. I like to store my web projects in there for easy access. I also tell Alfred about that folder so that it becomes indexed and searchable.</li>
<li>Finally, I alias my Ruby versions and I am ready to go!</li>
</ol>


<h2>After all that…</h2>

<p>I definitely recommend <a href="http://support.apple.com/kb/ht1553">creating a backup image of your machine</a> in this state, because it all takes a lot of work. Keep you image in a safe space, because you never know when you&rsquo;re going to need it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On a Quest for Awesome]]></title>
    <link href="http://codeadventurer.com/2013/09/02/on-a-quest-for-awesome"/>
    <updated>2013-09-02T17:41:00-06:00</updated>
    <id>http://codeadventurer.com/2013/09/02/on-a-quest-for-awesome</id>
    <content type="html"><![CDATA[<p>Two summers ago, after forays into organic farming and yurt living, I found myself in a really cool position at the Ohio State University <a href="http://www.oardc.ohio-state.edu/amp/">Agricultural Ecosystem Management Program</a> <!-- more --> that combined many things I was passionate about: building usable web systems, building community, and local agriculture. I was helping  make changes to <a href="http://localfoodsystems.org">Local Food Systems</a>, a website that helps connect entreprenuers with the food system (and those who run it) to help spawn new businesses based on the stream of goods and services in that system. I was working in <a href="http://drupal.org">Drupal</a>, and helped guide user experience and user interface decisions and changes in the three months that I was there on a half-time contract.</p>

<p>When the end of August came, I was sad to find out that this awesome job could not become a full-time endeavor because there were no new grants for the project, and neither could my half-time contract be extended. That same week, I was contacted by an internal recruiter for <a href="http://fathomdelivers.com">Fathom</a>, a digital marketing and analytics agency closer to where I had just moved, and began the conversation of becoming a full time web developer there.</p>

<p>Within a few weeks I was working for Fathom, building a lot of frontends to landing pages and microsites that were mostly used in email marketing and pay-per-click campaigns. In my first few weeks at Fathom, the Twitter-sphere was abuzz about <a href="http://www.gschool.it">gSchool</a>, a 6 month web development program in Denver, Colorado. I checked out the website, read a little bit about it, and thought to myself, &ldquo;Wow, it&rsquo;d be so great to learn web development from the pros, but who has the time to spend 6 months not earning a paycheck?&rdquo; I was intrigued by Ruby and thought it would be great to learn someday, but I moved on, back to my frontends, and back to my spaghetti PHP.</p>

<p>During my year at Fathom, I started getting more interested in Ruby, Test Driven Development, and Agile methodology, but the work we were doing on the web development team was rigid. But we sold our products well, and we had jam-packed development schedules. There was no time to explore or implement the things I was reading about, the things that I so desperately wanted to learn.</p>

<p>I thought I could fit in new learning by starting a <a href="http://codeforamerica.org">Code for America</a> Brigade in my town, dubbed <a href="http://codeforsummitcounty.org">Code for Summit County</a>, and organizing an event for the <a href="http://ndoch.org">National Day of Civic Hacking</a> locally, called <a href="http://hackNEO.org">HackNEO</a>, (which brought together over 30 local developers, designers, park lovers, and community memeber to hack on park data). As I worked and organized, I realized that if I was going to continue to be a leader, my learning needed a serious turbo boost to propel me forward past the bad habits I had acquired through self-teaching and a lack of a programming mentor.</p>

<p>I started exploring the option of attending one of those developer bootcamps that I had heard about. I needed a time and a place to focus on learning, without interruption. I researched all of them, read what students had to say about them, and thought about applying to them. But I wasn&rsquo;t sure if I could do it. I had a life at home &ndash; three months (the average of these bootcamps) was a long time away from everything that needed my attention &ndash; family, chickens, my cat, my job…</p>

<p><strong>And then it all boiled down to making a pros and cons list.</strong></p>

<p>An honest, hard look at the opportunity cost, as well as the ways doing this now would pay off for the rest of my career, brought me to one conclusion: <strong>Just do it.</strong></p>

<p>My focus was being close to home, in Chicago or New York at the bootcamps available there, when suddenly, seemingly out of the blue, <a href="https://twitter.com/steveklabnik/">Steve Klabnik</a> tweeted an application deadline reminder for gSchool. I had been following Steve on Twitter for a while, but hadn&rsquo;t realized he was an instructor for <a href="http://jumpstartlab.com">Jumpstart Lab</a>, the company that runs gSchool. I took another hard look at gSchool, and completed the application. I didn&rsquo;t think I stood a chance.</p>

<p>Fast-forward to today, and here I am, writing this post in Denver, Colorado. Next week we start gSchool[1], the second class that gSchool will graduate, and my coding adventures will continue. I will have experienced mentors helping me understand the tough spots, pushing me to the next level, and helping me unlearn bad habits, learn a new language, and build the skills needed to bring to life the ideas that have been gnawing at me for years.</p>

<p>I plan to document the journey so that others may have a map to guide them.</p>
]]></content>
  </entry>
  
</feed>
