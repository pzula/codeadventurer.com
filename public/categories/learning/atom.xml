<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | Code Adventurer]]></title>
  <link href="http://www.codeadventurer.com/categories/learning/atom.xml" rel="self"/>
  <link href="http://www.codeadventurer.com/"/>
  <updated>2015-03-24T11:16:56-04:00</updated>
  <id>http://www.codeadventurer.com/</id>
  <author>
    <name><![CDATA[Persa Zula]]></name>
    <email><![CDATA[persa@persazula.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SICP and Emacs for the Vim user]]></title>
    <link href="http://www.codeadventurer.com/2014/12/21/sicp-and-emacs-for-the-vim-user"/>
    <updated>2014-12-21T11:58:00-05:00</updated>
    <id>http://www.codeadventurer.com/2014/12/21/sicp-and-emacs-for-the-vim-user</id>
    <content type="html"><![CDATA[<h3>What is SICP?</h3>

<p><a href="http://mitpress.mit.edu/sicp/">SICP</a>, also known as &lsquo;Structure and Interpretation of Computer Programs&rsquo;, is a textbook by Harold Abelson and Gerald Sussman that was written to be used with the Computer Science 100 level course at MIT. For the last two decades, it has been the cornerstone of many student&rsquo;s introduction to how computer programs work. It is one of the few textbooks out there that, although originally written in the 1985, still applies in our field today. Although SICP does teach computer science concepts through the use of Scheme, the language that is being used is not as important as the concepts presented. Many fundamentals courses these days focus more on the language, and this is often cited as the reason why SICP is still relevant. After asking many programmers in several communities what their favorite book is on programming, SICP came up time and time again. As such, I am embarking on the journey to learn and practice through this textbook. But first, I need to get my environment set up. And that&rsquo;s where the interesting findings began!</p>

<!-- more -->


<h3>Vim, tmux, racket, and a few other things</h3>

<p>On a daily basis, my toolset mainly involves vim, tmux, and bash. I&rsquo;m fairly efficient in using my tools, and I was eager to get going with my setup so that I could start doing exercises in the book. After some digging around and trying of things, I realized that although my Vim setup is fine with lisp-y languages (due to plugins I installed for use with Clojure), that in-line evaulation and quick access to the REPL was another story. In Clojure, <code>vim-fireplace</code> does the heavy lifting of giving you in-line evaluation, and keeping a REPL running in the background. However, when using MIT-Scheme (the language used by the book and in the <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/">MIT Open Courseware course</a>, I thought I could get around this by running a tmux session split with panes for the Scheme REPL itself, and for my editor in the other. I quickly found that the Scheme REPL in tmux misbehaves when using arrow keys, option or alt to navigate around the text. I had also run across a few blog posts that listed struggles using MIT-Scheme with Vim, and in the end many of those folks chose to use Racket instead, for better editor integration. In an effort to stick with MIT-Scheme, I decided to look elsewhere: to Emacs.</p>

<h3>Emacs: A different beast</h3>

<p>With Emacs, you have an entire environment. Different from Vim, you can run entire programs within Emacs. I accidently began an IRC client in there. You can even play a game of tetris using <code>M-x tetris</code>. Having never seen someone use Emacs, when I first downloaded it on Monday, I was in for a surprise. I spent a little time with the main tutorial (similar to vimtutor in Vim, but for Emacs), and began to familiarize myself with the main concepts. But I felt clumsy when editing code. I have so much muscle memory build up around Vim, and that would be hard to un-learn while playing with a new language and learning other new concepts. So I recalled that <a href="http://twitter.com/chrishouser">Chris Houser</a> mentioned at dinner during ClojureConj that Evil-mode (the vim keybinding compatability package for Emacs) was pretty good, and he even re-stated it in a tweet when I was getting started:</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/pzula">@pzula</a> Don&#39;t forget evil-mode. It&#39;s good!</p>&mdash; Chouser (@chrishouser) <a href="https://twitter.com/chrishouser/status/544713565479788544">December 16, 2014</a></blockquote>


<script async src="http://www.codeadventurer.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So, having already completely copied the setup from Clojure for the Brave and True, I realized I had no idea how customizations work in Emacs, and my inital attempts at installing Evil-mode were failing me so I blew the entire directory away, re-installed emacs using homebrew, and started fresh in order to get what I needed.</p>

<p>Your mileage may vary, depending on how you&rsquo;ve set up your system, but I decided to outline the steps I took in order to create an environment where I, as a vim user, could effectively get around Emacs using MIT-Scheme (on OSX) and have everything I need at my fingertips for working through the problems in SICP. For those experienced in these things (Emacs and such), I welcome feedback and corrections along the way. I&rsquo;m only 4 days young in the environment! (And thank you to Chris Houser for the encouragement and quick walkthrough!)</p>

<h3>Get MIT-Scheme</h3>

<p>The best way I found to get MIT-Scheme in a format that doesn&rsquo;t need modification for Emacs is using homebrew:</p>

<p><code>brew update &amp;&amp; brew install mit-scheme</code></p>

<p>Then, type <code>scheme</code> in your shell and see if you get a response like so:</p>

<p><code>``
MIT/GNU Scheme running under OS X
Type</code>^C' (control-C) followed by `H' to obtain information about interrupts.</p>

<p>```</p>

<p>If so, you&rsquo;re good to proceed to the next step. If not, either try to install via homebrew again, or check your path.</p>

<h3>Next, get some Emacs!</h3>

<p>I installed Emacs via homebrew as well. The first time around, I went to the Emacs wiki and downloaded the executable OSX <code>.app</code>, but I live and breath in my terminal, so I chose to remove that version and reinstall via homebrew as well:</p>

<p><code>brew install emacs</code></p>

<p>This will get you the latest version of Emacs. You should now be able to run it from your terminal using <code>emacs</code>. If something fails, either try to reinstall via homebrew, or check your paths.</p>

<p>Once you have Emacs up and running, take a look at the help guide that is on the splash page. Then, print out the guide below and keep it handy during this journey!</p>

<h3>Print out this reference guide to Emacs</h3>

<p><a href="http://www.ic.unicamp.br/~helio/disciplinas/MC102/Emacs_Reference_Card.pdf">GNU Emacs Reference Guide</a> &mdash; You won&rsquo;t need it all of the time, but there are times when your vim keybindings won&rsquo;t get you what you want!</p>

<h3>Install Evil-mode</h3>

<p>After you&rsquo;ve poked around and used to commands, and your fingers get tired of using C-x for everything, make the decision on whether you&rsquo;re going to stick to purely Emacs, or if you want to the add the vim keybindings layer provided in Evil-mode.</p>

<p>If you&rsquo;re going to install Evil-mode, the instructions <a href="https://gitorious.org/evil/pages/Home#toc_2">on the site</a> work perfectly, and is everything you need to get going. For the sake of getting you going quickly, the instructions are repeated here:</p>

<p> Evil lives in a Git repository. To download Evil, do</p>

<p> <code>git clone git://gitorious.org/evil/evil.git</code></p>

<p> Move Evil to <code>~/.emacs.d/evil</code>. Then add the following lines to <code>~/.emacs</code>:</p>

<p>```
(add-to-list &lsquo;load-path &ldquo;~/.emacs.d/evil&rdquo;)</p>

<p>(require &lsquo;evil)</p>

<p>(evil-mode 1)
```</p>

<p>Once you&rsquo;ve gone through those steps, restart Emacs, and you should happily have access to all of the commands you know from Vim. Open a file with <code>:e</code> and you&rsquo;re on your way!</p>

<h3>Now, get to writing Scheme!</h3>

<p>After you&rsquo;ve gotten familiar with Emacs, you now need to learn how to get Emacs and MIT-Scheme to work with each other. Thankfully, MIT-Scheme has an excellent integration with Emacs, and this is super painless and only requires the memorization of useful commands.</p>

<p>To begin, open a file with the <code>.scm</code> extension. If you are using Evil-mode, just open a file using <code>:e filename.scm</code>. If you are using Emacs bindings, you can open a file with <code>C-x C-f</code>, enter a filename with the <code>.scm</code> extension, and press enter. In the bottom area of the buffer, your mode line should look like this:</p>

<p><code>
----:---F1  filename.scm      (Scheme)--L1--All-------------------------
</code></p>

<p>This indicates that the buffer is now aware of Scheme sytax in this file, and will be sensitive to it if you have any specific linters installed.</p>

<p>Now, you&rsquo;ll want to launch a Scheme intrepreter. If you&rsquo;re coming from the world of tmux and vim, you may be tempted to run the Scheme interpreter in a new tmux shell. But, with Emacs, you can actually run the intrepreter in another buffer inside of Emacs.</p>

<p>To do so, type <code>M-x run-scheme</code>. If MIT-Scheme is on your path, this will bring up a new buffer with the mode line looking like so:</p>

<p><code>
----:**-F1  *scheme*     (Inferior Scheme:run)--L10--All------------
</code></p>

<p>New buffers always take over the full screen. If you&rsquo;d like to have your file and the interpreter run side-by-side (as if you were running tmux and had vim split into one side, and the interpreter split into another), then you can quickly split your screen into two parts using <code>C-x 2</code>. Now you have a split with the same buffer on each side. You can open your file with <code>C-x b filename.scm</code>, or you can use the vim command <code>:e filename.scm</code> to get your file in one of the windows. To switch to the other split, you can use the Emacs command <code>C-x o</code>, or the vim command <code>C-w *direction*</code>.</p>

<p>Now, to get your file to evaluate in the intepreter, you can use the following command in either buffer <code>C-c C-l</code>. This is equivilent to the Scheme command of <code>(load 'file.scm')</code>, which also works. Every time you modify and save your Scheme file, you can reload it using those keybindings. If you solely want to evaluate an S-expression, place your cursor underneath the desired expression, and use the following keybinding: <code>C-x C-e</code>.</p>

<h3>May the () be with you</h3>

<p>Hopefully this walkthrough of how, as a complete newbie, I got Emacs and MIT-Scheme working together is helpful for those coming to it for the first time. In my case, coming from Vim, I felt a little lost at the start of my journey. But after spending an hour or so for a few days playing with it and getting used to the setup, I feel comfortable enough that my tooling will allow me to focus on the content of SICP, more than worrying about the setup. If you have any ideas on how I can improve the setup, or a better way of going about this, please reach out to me! I would love to keep this updated as I learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five Days of Clojure Immersion at ClojureConj]]></title>
    <link href="http://www.codeadventurer.com/2014/11/22/five-days-of-clojure-immersion"/>
    <updated>2014-11-22T16:24:00-05:00</updated>
    <id>http://www.codeadventurer.com/2014/11/22/five-days-of-clojure-immersion</id>
    <content type="html"><![CDATA[<p>This past week marks my first deep-dive into Clojure, and it happened to be at clojure/conj in Washington, DC. I had great time, and I want to give an overview of my experience as a newcomer to the community, so that anyone else that may have been intimidated by the parens can be inspired to give it a try.</p>

<!-- more -->


<p>I had originally registered only for the two-day Intro to Clojure training hosted by Cognitect, and had been looking forward to it for months. I had cracked open a book or two about Clojure here or there, and watched some of the <a href="http://www.purelyfunctional.tv/intro-to-clojure">LispCast videos</a> in small jolts, but I hadn&rsquo;t taken the time to just sit down with it for a while and really get immersed. The two-day training session seemed like a good way to get the kick in the pants that I needed to get going with the basics. A few weeks ago, two of my co-workers that had registered for the conference portion could no longer attend. I was fortunate enough to have been able to extend my stay with the support of my CTO, and pick up his ticket to the conj.</p>

<p>After spending Monday traveling, getting used to my surroundings when I arrived, and going on an obligatory tour of downtown DC on a Segway, I settled in for an evening of toying with <a href="https://github.com/tpope/vim-fireplace">vim-fireplace</a>, a plugin that allows for Clojure REPL support inside of vim. I got my environment up and running, and was ready for the first day of class.</p>

<p>When I got to the training session on Tuesday, Kim and <a href="https://twitter.com/lynngrogan">Lynn</a> from Cognitect were super friendly and got me going on my way. All of the files we&rsquo;d be working with, including a leiningen project with last Friday&rsquo;s alpha release of Clojure and other dependencies we&rsquo;d need for the class, were provided to us on a usb drive. <a href="http://twitter.com/puredanger">Alex Miller</a>, of StrangeLoop, LambdaJam, and ClojureWest fame, was our teacher for the course. We spent the first day learning about the REPL, functions, collections, flow control, names and namespaces, a deeper dive into collections, and finally, sequences. Each one of those sections had labs for us to try to solve in the REPL for ourselves, which I felt really helped solidify the concepts for me and helped me get used to the new syntax.</p>

<p>After our first day of class, Cognitect had organized a class dinner together for anyone that wanted to join. It was great to spend some time with our fellow class-mates and learn about the problems they were trying to solve, and why they were interested in using Clojure to solve them. I had excellent conversations with the group, and was also delighted to find out that Stephanie Hickey was taking the Introductory course with us for a fellowship project at her job. After dinner, I headed home to work some of the exercises in our labs, and rest up for the next day full of information.</p>

<p>On day two, we started out the day full-speed with sequence theory. After sequences, we got into transducers, something I&rsquo;m glad we covered before the conference, since there were many references during various talks. From there we moved into polymorphism, concurrency, macros, and core.async. By the end of class, we only had enough time to do a cursory cover of web development in Clojure, but I think that introduction was enough to help me understand the basics. With all of that information in that short of a period of time, I was a little surprised that I was able to keep up with the pace. I think Alex&rsquo;s patience and willingness to answer questions helped immensely in my ability to understand the concepts being presented. That evening, I went home and spent some time looking at some of the various resources that Alex gave us at the end of the class for continued learning, and solving problems on <a href="http://4clojure.com">4clojure</a>.</p>

<p>Throughout the conference, I was happy to have had the course right before attending. I felt like I had the vocabulary to understand the presentations, and that many of them were very approachable armed with that knowledge.</p>

<p>Some of my favorite presentations are already available online (and all will be available at <a href="https://www.youtube.com/watch?v=7lm3K8zVOdY">clojuretv</a>):</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=BNkYYYyfF48">Unlocking data-driven systems</a></li>
<li><a href="https://www.youtube.com/watch?v=4X-1fJm25Ww">The evolution of the Emacs tooling for Clojure</a></li>
<li><a href="https://www.youtube.com/watch?v=4KqUvG8HPYo">Inside Transducers</a></li>
<li><a href="https://www.youtube.com/watch?v=Ohuadp9S2hg">Helping voters with Pedestal, Datomic, Om and core.async</a></li>
<li><a href="https://www.youtube.com/watch?v=7lm3K8zVOdY">Exploring four hidden superpowers of Datomic</a>
&ndash;<a href="https://www.youtube.com/watch?v=0GzzFeS5cMc"> Making Games at Runtime with Clojure</a></li>
<li><a href="https://www.youtube.com/watch?v=824yVKUPFjU">Cló: The Algorithms of TeX in Clojure</a></li>
<li><a href="https://www.youtube.com/watch?v=3oQTSP4FngY">Always Be Composing</a></li>
<li><a href="https://www.youtube.com/watch?v=6xlyWjqFDWs">Building a Data Pipeline with Clojure and Kafka</a></li>
</ul>


<p>Throughout the conference &mdash; from the presentations, to the hallway track, to my interactions with people after sessions &mdash; I&rsquo;ve observed some very interesting things about the Clojure community as a first-timer.</p>

<p>I was very impressed that everyone was very humble and friendly. I took my introduction courses with Stephanie Hickey, and didn&rsquo;t have a clue until conversations we had much later. I had dinner &mdash; twice &mdash; with authors without knowing that they had written books about Clojure. No one touted themselves as the end-all-be-all of programming, and everyone was super excited and welcoming of my beginner&rsquo;s journey in Clojure. I didn&rsquo;t feel any judgement for showing up to a conference without having really used the language before, and people included me in conversations and answered my questions patiently without sneering at my lack of knowledge.</p>

<p>Throughout the presentations and the conversations I had with others, I found a recurring theme &mdash; everyone was eager to improve. Many talks presented ideas as &ldquo;pretty good, but what can we do better?&rdquo;, and then continued to push through to several iterations of the idea and it&rsquo;s evolution.</p>

<p>It seems that people in this community love what they do, and actively seek to improve on it whenever they can. There are strong ties to the research being done in the computer science world, and it is refreshing to see people pushing on that research, trying to implement it into the language, and reaching new boundaries when putting things into practice.</p>

<p>There is also a healthy, friendly competition. We heard about several different editors for Clojure code, and all of the presentations provided some humor around the competition, without demeaning or demoralizing the other parties. On Saturday, Zach&rsquo;s talk, Always Be Composing, presented ideas and a library that are a different way of dealing with event-driven abstractions than what is offered in <code>core.async</code>, but his presentation and demeanor was one of an openness to explore ideas, not one of righteousness. That is another recurring theme in the community &mdash; in many of the presentations, presenters were soliciting for discussion of the ideas presented; for input and suggestions. This is a different tone than I&rsquo;ve experienced in other communities, wherein a presenter will impart a tone of finality on the subject; that whatever is presented is the final draft.</p>

<p>Another interesting theme I observed was that people were seeking a greater clarity of intent in their projects. Through the proper abstractions, they wanted their programs to communicate well to other humans reading the program. This human-centric design is a theme in other circles as well, but it is inspiring to see these ideas about architecture and design thriving in the Clojure community.</p>

<p>Finally, the most exciting thing I observed was how Rich Hickey, undoubtedly look upon as a leader in the community around the language he invented, is still excited and enthused about it. He comes off as geniunely interested in the ideas of others, and is a thinker himself. He is a thoughtful, positive, and entertaining force in the community; full of energy and ideas, and excited in the potential that as the language grows in use, so will the discoveries around what goes into the core of the language.</p>

<p>It&rsquo;s been an awesome week of Clojure for me, and I&rsquo;m glad to have taken a deep-dive into it. I feel empowered to take my knowledge of the language to the next level and start building projects with it, to learn the nuances of functional thinking, and to experience the focus on data that is prevelant in this community. Kudos to the event organizers, the speakers, the sponsors and the community for helping even the least-experienced attendees feel welcome and involved. I couldn&rsquo;t have asked for a better experience!</p>
]]></content>
  </entry>
  
</feed>
