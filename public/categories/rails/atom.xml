<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Code Adventurer]]></title>
  <link href="http://codeadventurer.com/categories/rails/atom.xml" rel="self"/>
  <link href="http://codeadventurer.com/"/>
  <updated>2014-12-21T12:31:26-05:00</updated>
  <id>http://codeadventurer.com/</id>
  <author>
    <name><![CDATA[Persa Zula]]></name>
    <email><![CDATA[persa@persazula.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beautiful, Dynamic Database Seeding Scripts]]></title>
    <link href="http://codeadventurer.com/2014/02/01/beautiful_dynamic_database_seeding"/>
    <updated>2014-02-01T18:54:00-05:00</updated>
    <id>http://codeadventurer.com/2014/02/01/beautiful_dynamic_database_seeding</id>
    <content type="html"><![CDATA[<p>In our current Rails project, my team is building <a href="http://github.com/freshfinder">FreshFinder</a>, a community-edited Farmer&rsquo;s Market finder, with reviews. The main data we are using in our application, prior to user contributions, is data that we are pulling from <a href="http://data.gov">Data.gov</a>&rsquo;s Excel spreadsheet of USDA Farmer&rsquo;s Market Data. <!-- more -->A spreadsheet?? Yes. A spreadsheet. Because although they have a publicly-accessible API for the data, there are only two possible calls to this API, both of which do not contain all of the information otherwise contained in the Excel file.</p>

<p>Armed with the <code>CSV</code> Ruby library, some regex, some string splitting, and gsubbing, my team and I have been normalizing the data from the spreadsheet to build out a publically-accessible, RESTful API for our application&rsquo;s frontend to consume. While building it out, it makes sense to seed the database with real data from the spreadsheet, so I&rsquo;ve been learning a lot about building beautiful, dynamic seed scripts for Rails.</p>

<p>The first thing to consider is that although when you run <code>rake db:seed</code>, you&rsquo;re calling upon the <code>/db/seed.rb</code> file in Rails, you aren&rsquo;t constrained to just using this file. In my seed file, I <code>require</code> the files which contain the classes and methods I need access to, like so:</p>

<p>```ruby
require &lsquo;./db/seeds/market_seeder&rsquo;
require &lsquo;./db/seeds/product_seeder&rsquo;</p>

<p>ProductSeeder.seed
MarketSeeder.seed(100)</p>

<p>```</p>

<p>As you can see in the code above, I then call the <code>seed</code> method on both the <code>ProductSeeder</code> and the <code>MarketSeeder</code> classes. But before I ever even got to the point of calling these two methods in my <code>seeds.rb</code>, I wrote some tests, and I recommend you do the same.</p>

<p>It&rsquo;s important to remember that seed files are just POR, Plain Old Ruby, and that testing them is just like testing any other Ruby code that you produce. In my <code>spec</code> folder, I created a subfolder called <code>seeds</code> and built out the <a href="https://github.com/FreshFinder/to-the-market-api/blob/master/spec/seeds/market_seeder_spec.rb"><code>market_seeder_spec.rb</code></a> file to test parsing the CSV file and to expect changes to the database upon running it.</p>

<p>When we talked about what we wanted our seeder to do, we had two things that were important to us: the first was that we could dynamically control how many items got seeded into the database. This was important because we didn&rsquo;t want to be building and testing our mapping and search functionality with the full 8,200 farmer&rsquo;s markets records during the first week of development. The second thing that was important to us was getting feedback during the seeding process, which usually means outputting to the screen a piece of information for each object seeded with a <code>puts</code> statement. Each of these things presented a new way of thinking about seeding data for us.</p>

<p>To create a dynamic seeding process from our parsed CSV file, we accept an optional parameter in our <code>seed</code> method that takes a number and injects it into a range that gets run on the collection that builds each market, like so:</p>

<p>```ruby
def self.seed(number = nil})
  data = MarketSeeder.parse_file(&lsquo;./db/seeds/source/2013_farmers_markets.csv&rsquo;)
  if number</p>

<pre><code>data.to_a[0...number].collect {|line| build_markets(line)}
</code></pre>

<p>  else</p>

<pre><code>data.collect {|line| build_markets(line)}
</code></pre>

<p>  end
end
```</p>

<p>The next piece of functionality, outputting the name of each market as each market was built with the <code>build_markets</code> method, was as simple as using a <code>puts</code> statement. However, the <code>puts</code> would output to the string even when a test was running, which quickly cluttered up test feedback. Thankfully, earlier in the week Katrina Owen had shown me a really neat concept I hadn&rsquo;t thought about before &mdash; that you could change what <code>puts</code> is being executed on, and in turn, change where the string gets captured.</p>

<p>The way this is done is to define your output parameter, and set the default to <code>STDOUT</code>, like so:</p>

<p>```ruby
def self.seed(number = nil, out = STDOUT)
  data = MarketSeeder.parse_file(&lsquo;./db/seeds/source/2013_farmers_markets.csv&rsquo;)
  if number</p>

<pre><code>data.to_a[0...number].collect {|line| build_markets(line, out)}
</code></pre>

<p>  else</p>

<pre><code>data.collect {|line| build_markets(line, out)}
</code></pre>

<p>  end
end</p>

<p>def self.build_markets(line, out)
 m = Market.create!(:fmid => line[:fmid], :name => line[:marketname])
 out.puts line[:marketname]
end
```</p>

<p>You may be thinking, ok, so you&rsquo;re telling <code>puts</code> to run as a method on <code>STDOUT</code>, that&rsquo;s no different than it&rsquo;s default functionality. True. So in your test suite, you&rsquo;re going to require <code>StringIO</code>, like so:</p>

<p>```ruby
require &lsquo;stringio&rsquo;</p>

<p>describe &ldquo;Seeding a market&rdquo; do
  before :each do</p>

<pre><code>@out = StringIO.new
</code></pre>

<p>  end</p>

<p>  it &ldquo;changes the count on the Market database when seeded&rdquo; do</p>

<pre><code>expect(Market.count).to eq 0
expect { MarketSeeder.seed(2, @out) }.to change{Market.count}.by 2
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>By piping <code>puts</code> to <code>StringIO</code>, you are capturing the feedback instead of outputting it to the string during testing, and thus relieved of the noise while running your specs.</p>

<p>After building our seed scripts for the first time using this method, I&rsquo;ve had a much better experience than when I used to shovel everything straight into the <code>db/seeds.rb</code> file. My code is easier to read, shorter, and has a better seperation of concerns. I encourage you to give it a try, and let me know any other tricks to creating great seeds scripts!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Rails with PostgreSQL locally]]></title>
    <link href="http://codeadventurer.com/2013/11/02/running-rails-with-postgresql-locally"/>
    <updated>2013-11-02T13:18:00-04:00</updated>
    <id>http://codeadventurer.com/2013/11/02/running-rails-with-postgresql-locally</id>
    <content type="html"><![CDATA[<p>I had a few issues installing Rails for the first time with PostgreSQL locally, and since the problems I was having as a newbie in both were not well-documented on the internet, I thought I&rsquo;d post a rundown of what happened and how I fixed it. <!-- more --></p>

<h3>Installing pgsql with home-brew</h3>

<p>This topic has been covered exhaustively on the web, but the way I did it was to run:</p>

<p><code>
$ brew update
$ brew install postgresql
</code>
Then, I followed the rest of the directions in the terminal to finish my install, and to install the pg gem.</p>

<p><strong><em>Big thing of note:</em></strong> If you are not sure you followed all the directions, and you&rsquo;re getting crazy errors, and you&rsquo;ve already closed your terminal, all is not lost!</p>

<p>You can run <code>brew info postgresql</code> to see the instructions again and double check.</p>

<h3>Fixing your broken PG Connection in Rails</h3>

<p>I decided to start my first rails project with pgsql, because I wanted to give it a try and after using sqlite3 a few times already, I was ready to graduate to something I could actually deploy on Heroku.</p>

<p>So I created my brand-new rails app by running this command in my terminal:</p>

<p><code>rails new blogger -d postgresql</code></p>

<p>Everything looked gravy, until I loaded up <a href="http://localhost:3000">http://localhost:3000</a> and got the big red Rails error with something I did not understand:</p>

<p><code>PG::ConnectionBad (FATAL:  role "blogger" does not exist
):</code></p>

<p>So I found that after doing that, I did some research and found that I needed to run the rake task to actually set up the databases. That&rsquo;s fine by me! So I ran this in my terminal:
<code>rake db:create:all</code></p>

<p>Then, my terminal blew up and the error I would get would be:
<code>FATAL:  role "blogger" does not exist</code></p>

<p>Not knowing much about this, I spent some time searching and found out that I needed to create a new user named the same thing as the user in my <code>database.yml</code> file in the Rails app. Mine happens to be <code>blogger</code>, so I then went into my terminal and ran the following command:
<code>createuser -s -r blogger</code></p>

<p>Then, I ran this command again, this time successfully: <code>rake db:create:all</code></p>

<p>After doing this, and restarting my Rails server, I went back to <a href="http://localhost:3000">http://localhost:3000</a> and I was happily riding the Rails!</p>
]]></content>
  </entry>
  
</feed>
