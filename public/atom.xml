<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Adventurer]]></title>
  <link href="http://codeadventurer.com/atom.xml" rel="self"/>
  <link href="http://codeadventurer.com/"/>
  <updated>2014-11-11T08:51:25-05:00</updated>
  <id>http://codeadventurer.com/</id>
  <author>
    <name><![CDATA[Persa Zula]]></name>
    <email><![CDATA[persa@persazula.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keeping Things DRY Without Complecting: Table Inheritance]]></title>
    <link href="http://codeadventurer.com/2014/11/11/keeping-things-dry-without-complecting-table-inheritance"/>
    <updated>2014-11-11T08:49:00-05:00</updated>
    <id>http://codeadventurer.com/2014/11/11/keeping-things-dry-without-complecting-table-inheritance</id>
    <content type="html"><![CDATA[<h3>Keeping Things DRY Without Complecting: Table Inheritance</h3>

<p>When dealing with architecture, we find ourselves often dealing with concepts that are similar, yet just slightly different. In an effort to keep our code DRY, we might reach for an abstraction of these concepts all the way down to the data layer, in order to squeeze out more re-use within our codebase. But sometimes, our abstractions can lead to more complexity down the road. I&rsquo;d like to exploire this concept to see how an abstraction can morph over time, and what sort of decisions along the way can help an abstraction become easier or harder to use.</p>

<p>In the following example, we&rsquo;re going to assume that we are building a type of storage and logic system for content types in a small, hosted content-management system.</p>

<p>A content management system can have many kinds of content &mdash; including polls, blog posts, articles, events and so on. When a user opens an account, they are given a few of these default content types to use and customize.</p>

<p>As the engineer, we know that the types of content that our product offers to users will grow as our product grows, so we take a close look at what the content types have in common in order to try to tease out the similarities and build an abstraction that will allow us to easily add more content types in the future.</p>

<p>We find that each kind of content has a lot of the same ideas: we have sections, and each section can have instructions on what to use that section for, and each section can have many different input types.</p>

<p>There could be a problem, though: when a user modifies one of the content types by adding or removing parts, we can end up with data loss if they&rsquo;ve used that content type prior to the modification. By removing the field for author in the future, all prior posts that had an author entry will no longer have that data.</p>

<p>After some thought, we find a way around the problem of data loss. We will have
Templates for each type of content. The template is where a user can customize
how they want to be able to use this input form, from naming the template to
adding, editing and deleting fields and text within sections. Sections can also
be added, edited, or deleted. Some users might want to have a mood input field in
their blog posts. Others might want to have a &lsquo;Related Articles&rsquo; section
available when they add new acticles.  We also want to offer the ability to
bring back anything that has been removed from the template in the past, so each
template will have a &lsquo;Deleted&rsquo; section, where inputs and sections can be
retreived for later use.</p>

<p>However, the Template is only used for storing the structure of how the user
wants to interact with that type of content. When a user actually wants to
create a new piece of content, we will duplicate the structure of the Template
and turn it into a Document. This Document is a snapshot of the Template at that
point in time, and also contains the data entered by the user (such as an article or a blog post). If the Template for that content types gets modified
in the future, it will not affect a Document that has been created for that
content type, because they
are different objects and the data resides in different tables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building My Own Lightsaber: Ergodox Tips]]></title>
    <link href="http://codeadventurer.com/2014/11/02/building-my-own-lightsaber-ergodox-tips"/>
    <updated>2014-11-02T11:08:00-05:00</updated>
    <id>http://codeadventurer.com/2014/11/02/building-my-own-lightsaber-ergodox-tips</id>
    <content type="html"><![CDATA[<p>Building a keyboard can be likened to building a lightsaber. I set off on an adventure, found some plans, and somehow found the confidence to give it a try.</p>

<p>This is not an endeavor that happens without trepidation. When I first decided to spring for an Ergodox kit on <a href="http://massdrop.com">Massdrop</a>, I knew that I wouldn&rsquo;t be getting the parts in the mail for months. I figured I knew how to do a little soldering (thanks to the <a href="http://concoctory.com/">Concococtory&rsquo;s</a> beginner class), and it wouldn&rsquo;t be a big deal. But once the kit was on my front porch, months later, I started to doubt my abilities to complete this project.</p>

<!-- more -->


<p>I opened up the package and found ~100 diodes to be surface-mounted, two PCBs, two USB cables, three LED&rsquo;s, two TRSS connectors, one I/O expanders, an I/O expansion cable, mechanical key switches, keycaps, and a case.</p>

<p>I found the instructions to build the kit online, and got everything in place to begin the process. I messed up on a few counts, but I finished it, and I wanted to provide resources for other people to be able to build their own without as many hiccups as I encountered.</p>

<h2>Things you will need (learned the hard way)</h2>

<h4>1. A Good Soldering Iron</h4>

<p>Before you get your ErgoDox kit, get a <a href="https://www.sparkfun.com/products/10707">50 watt, variable temperature soldering iron</a> from SparkFun</p>

<p>I started this project with a cheap RadioShack soldering iron. It got too hot too fast, and couldn&rsquo;t maintain a reasonable temperature for soldering SMDs onto a PCB. I had to stop construction in order to get a proper variable-temperature iron in the mail.</p>

<h4>2. Soldering and De-soldering consumables</h4>

<p>You&rsquo;re going to need a good, thin solder for the work you will be doing on the Ergodox. <a href="http://www.amazon.com/Amico-0-3mm-Rosin-Solder-Soldering/dp/B008DEYEAW">This one</a> is a good choice.
You&rsquo;re also going to need a few things to help you when you mess up. I recommend some <a href="https://www.amazon.com/gp/product/B003E48ERU">desoldering wick</a>, and a good <a href="https://www.amazon.com/gp/product/B0089EQGW0">flux pen</a>.</p>

<h4>3. A small electronics tool kit</h4>

<p>The tools I found I got the most use out of for this project were:</p>

<ul>
<li><a href="http://www.amazon.com/Testors-8942T-Reverse-Action-Tweezers/dp/B003ZD1148">Reverse-action tweezers</a> (used for placing the SMD&rsquo;s)</li>
<li>Needle-nose pliers</li>
<li>Wire cutters</li>
<li>A sharp pocket knife</li>
<li>Solder sucker</li>
<li>A magnifying glass, preferably one with a built in light (like <a href="http://www.amazon.com/3-5x12x-Helping-Magnifying-Soldering-Magnifier/dp/B009NOG9TA">this one</a>)</li>
<li>Voltmeter</li>
</ul>


<h4>4. A workspace</h4>

<ul>
<li>Big enough to leave everything spread out</li>
<li>Safe from pets and kids who might want to play with the parts</li>
<li>Good lighting</li>
<li>Well-ventilated (for soldering)</li>
</ul>


<h4>5. A few practice projects</h4>

<p>If you are new to soldering (or haven&rsquo;t soldered in a while), it&rsquo;s best to do a little bit of practice before you undertake this.</p>

<p>You should practice both your through-hole soldering, and your surface-mount soldering. SparkFun sells kits for this. This <a href="https://www.sparkfun.com/products/10723">Weevil kit</a> is a great through-hole project (make sure to read the instructions and tips), and the <a href="https://www.sparkfun.com/products/10935">Simon Says</a> project is an excellent surface-mount project to practice with.</p>

<h4>6. Some decent instructional videos</h4>

<p>I found <a href="https://www.youtube.com/watch?v=3NN7UGWYmBY">this video</a> to be helpful for learning how to do SMD soldering without needing more equipment.</p>

<p>I found <a href="https://www.youtube.com/watch?v=tlSY1uaw0GA">this video</a> helpful for learning how to desolder something that you surface-mounted. I had a couple of mishaps throughout the process and needed to use this technique a few times.</p>

<p>I also had a few switched that I needed to replace (due to my own poor soldering jobs, not due to Massdrop&rsquo;s shipment), and needed to know how to desolder the through-hole joints. <a href="https://www.youtube.com/watch?v=Z38WsZFmq8E">Here is a video that is helpful</a> for that task.</p>

<h4>7. Get going!</h4>

<p>Once you get your Massdrop order of parts, make sure you open it and count all of the pieces. I did not do this, and ended up with a few missing parts. It was a few weeks after the drop arrived, however, so I had to aquire the missing parts on my own.</p>

<p>Give yourself at least one weekend to do this project &mdash; after you have taken the time to get all of the things I have listed above, and also after you have practiced your soldering. Make sure you follow the order of instructions in the <a href="https://www.massdrop.com/ext/ergodox/assembly.php">Massdrop assembly instructions</a>, and you should come out on the other side of your weekend with a shiny new keyboard!</p>

<h4>Common Problems</h4>

<p>I encountered a lot of common problems along the way, and I thought I should list them here in case you have similar issues.</p>

<ul>
<li>Keyboard stops working after pressing a key</li>
</ul>


<p>This is likely due to a diode having a lose connection, or being damaged. Check across diodes with a voltmeter to see if any indicate the connection is not made. Use SMD desoldering skills that you learned to remove the offending diode, and if you removed it cleanly, re-solder the same diode to the board. If you have damaged the diode (either in placing it, or removing it), use a new one to ensure the problem will not persist.</p>

<ul>
<li>A key is not working when pressed</li>
</ul>


<p>This is likely due to a poor solder job around the key-switch. Flip the board over and check your joint. If it needs to be re-soldered, revisit the de-soldering a through-hole video to get proper instruction on how to remove the part, clean the through-hole, and re-solder the switch. This is often the better option than adding more solder, as the solder can overflow to the other side if you use too much, and cause damage to the board or the switch. There was only one switch I had that was actually malfunctioning after trying to remove and re-solder it. In that case, remove the switch completely using desoldering techniques, and use a spare provided by Massdrop.</p>

<ul>
<li>An entire column of keys do not work</li>
</ul>


<p>This is likely due to a poor solder job on the Teensy or the I/O expander. Check that every connection point is free of excess solder that may be connecting multiple together. Yes, these are small components, but careful soldering around these two will ensure that you don&rsquo;t run into this problem.</p>

<ul>
<li>Keys aren&rsquo;t all aligned well, causing issues with the keycaps not sitting in place well.</li>
</ul>


<p>This problem I could have avoided had I had experience with using a PCB and acrylic together. Although the solder on the other side should help keep your key-switches snugly in place (if you placed them in straight), if you ever do any modifications to your key-switches in the future (such as replacing what kind of springs you are using in your Cherry MX keys), you are at risk of damaging your solder job. To prevent this from happening, I recommend using a hot glue gun to place your key-switches in place on the acrylic <strong>before</strong> you place it through the PCB, and <strong>before</strong> you solder your key-switches in place. I&rsquo;m working on a second keyboard project at the moment and realize how much of a difference this makes now.</p>

<h2>The Review</h2>

<p>The Ergodox is a great keyboard for someone who is looking for a do-it-yourself alternative to matrix-style split keyboards. I found it a little difficult to get used to with the blank keycaps, so I joined in on a <a href="http://www.geekhack.org">GeekHack</a> group buy to buy keycaps for the ErgoDox. It took several months to get them, and in that time period I wasn&rsquo;t using the ErgoDox because of the learning curve. Once I got the keycaps, I still felt slow. I put the ErgoDox away for a while, as I wasn&rsquo;t fast enough with it yet to use it daily at work, and I wasn&rsquo;t working on side projects in the evenings. These past few weeks, my Apple Wireless keyboard died, and the only other keyboard I had around was the ErgoDox. I dusted it off, and within a few weeks got better at using it. I&rsquo;m still not fast enough with special characters that I use daily in programming, so it is a bit cumbersome. I feel that with a few months of practice, someone can bring their typing speed back up to par, and with a lot less wrist pain than a traditional keyboard.</p>

<h2>Photos of my project</h2>

<p><img src="http://codeadventurer.com/images/ergodox/ergodox_diodes.jpg" alt="Placing diodes using the magnifiying glass" /></p>

<p class="caption">Placing diodes using the magnifying glass</p>


<p><img src="http://codeadventurer.com/images/ergodox/keyswitches_on_acrylic.jpg" alt="Placing keyswitches on acrylic" /></p>

<p class="caption">Placing keyswitches on acrylic</p>


<p><img src="http://codeadventurer.com/images/ergodox/keyswitches_and_pcb.jpg" alt="Placing keyswitches on PCB" /></p>

<p class="caption">Placing keyswitches on PCB</p>


<p><img src="http://codeadventurer.com/images/ergodox/switches_and_diodes.jpg" alt="Soldering of switches" /></p>

<p class="caption">Soldering on switches after the diodes</p>


<p><img src="http://codeadventurer.com/images/ergodox/missing_keycap.jpg" alt="Finished, with missing keycap" /></p>

<p class="caption">Missing a keycap from the drop</p>


<p><img src="http://codeadventurer.com/images/ergodox/with_new_keycaps.jpg" alt="Finished, with new keycaps" /></p>

<p class="caption">The Ergodox today</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Your Own API Data Vaccum with Sinatra, Redis, and MongoDB]]></title>
    <link href="http://codeadventurer.com/2014/06/23/build-your-own-api-data-vacuum-with-sinatra"/>
    <updated>2014-06-23T20:57:00-04:00</updated>
    <id>http://codeadventurer.com/2014/06/23/build-your-own-api-data-vacuum-with-sinatra</id>
    <content type="html"><![CDATA[<p>After setting up a SparkCore device (an internet-connected, Arduino-like device) to report the temperature and humidity in my greenhouse, I had one problem: persistance of the data. The SparkCore can transmit data via their SparkCloud API if you assign a variable for it in your Arduino code, and so I had a place where the data was constantly being transmitted. However, since the SparkCore itself has very limited memory capabilities, and since the only thing the SparkCloud itself does it provide a JSON-formatted API, I needed to figure out how to periodically ping the API and scoop up the data into a database.</p>

<p>This didn&rsquo;t seem like a job for the heft of Rails, so I started with Sinatra. My goals were to create something that others could reuse, improve upon, and deploy easily. Below I&rsquo;ll outline how to build your own API-slurping app from scratch. If you&rsquo;d rather just grab the code and hack on it, you can find it on GitHub at <a href="https://github.com/pzula/greenhouse-watchman">https://github.com/pzula/greenhouse-watchman</a>.The evolution of the project is evident through the <a href="https://github.com/pzula/greenhouse-watchman/commits/master">commit log</a>, so you can see how I started building up from a few simple files to a more organized solution.</p>

<p>In this walkthrough, I&rsquo;ll be showing you how I built a simple Sinatra app with Redis and MongoDB to suck out data from and API and store it in a database for use in a data visualization project.</p>

<!-- more -->


<h2>Figure out what data you are trying to store</h2>

<p>For this project, I know that I have a few simple things that I want to store: temperature and humidity readings, along with the time of each reading. Each of these pieces of data have their own API endpoint that I can access in order to read the data. My endpoints look like this: <code>https://api.spark.io/v1/devices/myDeviceID/temperature?access_token=myAccessToken</code> and <code>https://api.spark.io/v1/devices/myDeviceID/humidity?access_token=myAccessToken</code> Explore your situation, and modify the instructions below to better suit your needs.</p>

<h2>Ruby version</h2>

<p>I&rsquo;m using Ruby 2.1.2 for this tutorial, and all of the latest versions on <a href="http://rubygems.org">RubyGems</a> as of this writing for this walkthrough. You can find installation instructions for getting your machine set up with <a href="http://tutorials.jumpstartlab.com/topics/environment/environment.html">this tutorial from JumpstartLab</a>. Be sure to have Bundler installed (you can install it with <code>gem install bundler</code> once your Ruby environment is all set up).</p>

<h2>Start with a clean slate</h2>

<p>Create a new folder for this project, as it will contain quite a few files by the end.</p>

<h2>Install MongoDB and Redis on your system</h2>

<p>Assuming a Mac OSX system, using homebrew:
<code>brew install mongodb</code> and then follow the instructions output to the terminal to launch it.
<code>brew install redis</code>, and then follow the instructions output to the terminal to launch it.
Both will need to be running for this project.</p>

<h2>Set up your Gemfile with Sinatra, MongoDB, and Mongoid</h2>

<p>First things first: You&rsquo;re going to need a few gems to get you off the ground running.
Create a <code>Gemfile</code> file, and add the following to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'><span class="n">ruby</span> <span class="s2">&quot;2.1.2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;bson&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>MongoDB uses <code>bson</code>, which is short for Binary JSON for data representation. We&rsquo;ll also be using the Mongoid gem as our Object-Document-Mapper (ODM). You can think of it as an interface to the database that is similar to how ActiveRecord is used to interact with MySQL and PostgreSQL databases.</p>

<p>Run <code>bundle install</code> to get all of the gems and dependencies installed, and we&rsquo;ll be ready to get started.</p>

<p>Next we&rsquo;ll get our Mongoid configuration all set up. You&rsquo;ll need a file named <code>mongoid.yml</code>. This file will look like this to start with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">sessions</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">default</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">database</span><span class="p">:</span> <span class="n">greenhouse_watchman</span>
</span><span class='line'>      <span class="ss">hosts</span><span class="p">:</span>
</span><span class='line'>        <span class="o">-</span> <span class="ss">localhost</span><span class="p">:</span><span class="mi">27017</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll create a simple file called <code>application.rb</code>. This file will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/add-data&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Humididty</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">date</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="ss">reading</span><span class="p">:</span> <span class="mi">46</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Temperature</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">date</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="ss">reading</span><span class="p">:</span> <span class="mi">87</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="s1">&#39;Great! You triggered fake data creation!&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/data.json&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content_type</span> <span class="ss">:json</span>
</span><span class='line'>  <span class="n">all_data</span> <span class="o">=</span> <span class="no">Temperature</span><span class="o">.</span><span class="n">all</span> <span class="o">+</span> <span class="no">Humidity</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="n">all_data</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Humidity</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:date</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">Time</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:reading</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Float</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Temperature</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:date</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">Time</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:reading</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Float</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you save that file, and load your app with the following command in the same folder as the file: <code>bundle exec ruby application.rb</code>, you will have started your server.
You can now visit <code>http://localhost:4567/add-data</code> to trigger the addition of one fake temperature reading and one fake humidity reading. If you then visit <code>http://localhost:4567/data.json</code>, you should see both readings output in a JSON format in your browser if everything is hooked up correctly. Awesome! We have our NoSQL data store hooked up properly, and we can write and read from it using Mongoid!</p>

<h2>Get the data with a background worker</h2>

<p>Next, we&rsquo;re going to install Sidekiq as our background job processor. Sidekiq works with Redis to process your queue. We&rsquo;re going to be scheduling our background workers to go visit the API we want to suck data from, and allow the worker to process the response and store it in our database. By doing this in the background, none of our site visitors will have to wait for the data to be fetched from the API, and also we won&rsquo;t need to always have a browser window open to tell our server to go get the data periodically. It will all happen in the background, even as we sleep. (Well, as long as our server is running!)</p>

<p>We&rsquo;re also going to be using Faraday for our HTTP requests. Faraday gives us a simple interface to use HTTP requests in Ruby, so we&rsquo;ll add it as a dependency.</p>

<p>Add Sidekiq to your Gemfile like so: <code>gem 'sidekiq'</code>, and add Faraday with <code>gem 'faraday'</code> and then run <code>bundle install</code> to get your new gem and dependencies.
Now, at the top of you <code>application.rb</code> file, add these requirements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sidekiq&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;faraday&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;ll add a worker that will go get the data for us when it is invoked. In the bottom of the same file, you can add this new class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">APIWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Worker</span>
</span><span class='line'>
</span><span class='line'>  <span class="vg">$redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">msg</span> <span class="o">=</span> <span class="s2">&quot;get_api_data&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$redis</span><span class="o">.</span><span class="n">lpush</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">store_data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store_data</span>
</span><span class='line'>    <span class="n">get_data</span><span class="p">(</span><span class="s2">&quot;temperature&quot;</span><span class="p">,</span> <span class="n">yourDeviceIDHere</span><span class="p">,</span> <span class="n">yourAccessTokenHere</span><span class="p">)</span>
</span><span class='line'>    <span class="n">get_data</span><span class="p">(</span><span class="s2">&quot;humidity&quot;</span><span class="p">,</span> <span class="n">yourDeviceIDHere</span><span class="p">,</span> <span class="n">yourAccessTokenHere</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_data</span><span class="p">(</span><span class="n">spark_var</span><span class="p">,</span> <span class="n">device_id</span><span class="p">,</span> <span class="n">access_token</span><span class="p">)</span>
</span><span class='line'>    <span class="n">request_url</span> <span class="o">=</span> <span class="s2">&quot;https://api.spark.io/v1/devices/&quot;</span> <span class="o">+</span> <span class="n">device_id</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="n">spark_var</span>  <span class="o">+</span> <span class="s2">&quot;?access_token=&quot;</span> <span class="o">+</span> <span class="n">access_token</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">Faraday</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">request_url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">parsed_response</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">spark_var_to_model</span><span class="p">(</span><span class="n">spark_var</span><span class="p">)</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">date</span><span class="p">:</span> <span class="n">parsed_response</span><span class="o">[</span><span class="s1">&#39;coreInfo&#39;</span><span class="o">][</span><span class="s1">&#39;last_heard&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">reading</span><span class="p">:</span> <span class="n">parsed_response</span><span class="o">[</span><span class="s1">&#39;result&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">spark_var_to_model</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Module</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">var</span><span class="o">.</span><span class="n">capitalize</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now every time the <code>APIWorker</code> is called, <code>get_data</code> will get the data from our <code>request_url</code>, parse the response body as <code>JSON</code>, and insert the data appropriately from the JSON hash to our database. <code>spark_var_to_model</code> capitalizes our <code>spark_var</code> and creates the appropiate syntax to call our respective model, whether it is <code>Temperature</code> or <code>Humidity</code>.</p>

<p>Now, we&rsquo;ll need something to trigger our worker. Let&rsquo;s add another route to the <code>application.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/work&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">SparkcoreWorker</span><span class="o">.</span><span class="n">perform_async</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a new terminal window, make sure to start up Sidekiq with this command: <code>bundle exec sidekiq -r ./application.rb</code></p>

<p>If we start our server up again with <code>ruby application.rb</code> in a new terminal window, and visit our new route at <code>http://localhost:4567/work</code>, it will trigger our background job. How do we know if it worked? If we provided the correct <code>device_id</code> and <code>access_token</code> in the <code>perform</code> method above, it should have done it&rsquo;s job. We should see new data at <code>http://localhost:4567/data.json</code>, along with the dummy data we created previously.</p>

<p>If you&rsquo;re not sure your background jobs are working, you can look at the Sidekiq web interface. We&rsquo;re going to add a <code>Rake</code> task to allow you to start the Sidekiq GUI easily. Here you&rsquo;ll be able to see if background jobs have failed or have been processed. Create a new file with the filename: <code>Rakefile</code>, and add the following to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:monitor</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;sidekiq/web&#39;</span>
</span><span class='line'>  <span class="n">app</span> <span class="o">=</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Web</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">set</span> <span class="ss">:environment</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">set</span> <span class="ss">:bind</span><span class="p">,</span> <span class="s1">&#39;0.0.0.0&#39;</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">set</span> <span class="ss">:port</span><span class="p">,</span> <span class="mi">9494</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">run!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you save it, you can run <code>bundle exec rake monitor</code> and visit the URL at <code>http://localhost:9494/sidekiq</code> to monitor the jobs. If any have failed and need to be retried, you can restart the failed job from here.</p>

<h2>Schedule the jobs</h2>

<p>Now that we have our background job hooked up, there&rsquo;s one thing missing: it&rsquo;s being triggered by us manually visiting a route on our site. This isn&rsquo;t very efficient for data collection, so instead we&rsquo;re going to have to schedule our background job to run periodically on it&rsquo;s own. For that, we&rsquo;ll use the <code>Clockwork</code> gem.</p>

<p>In your Gemfile, add <code>gem 'clockwork'</code>, and run <code>bundle install</code> to get your new gem and dependencies.
Then, add another require statement in <code>application.rb</code> like so: <code>require 'clockwork'</code></p>

<p>Then, at the bottom of the file, add this code to set up Clockwork:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Clockwork</span>
</span><span class='line'>  <span class="n">handler</span> <span class="k">do</span> <span class="o">|</span><span class="n">job</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Running </span><span class="si">#{</span><span class="n">job</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">every</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">minutes</span><span class="p">,</span> <span class="s1">&#39;apiworker.job&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="no">APIWorker</span><span class="o">.</span><span class="n">perform_async</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you save the file, you can start a third terminal window and get Clockwork running by executing: <code>clockwork application.rb</code>. If everything went well, you&rsquo;ll be getting new data pulled down from the API every 2 minutes, and stored into your database!</p>

<p>In the next blog post, I&rsquo;ll be showing you how to deploy this simple app to Heroku. If you have any questions, let me know <a href="http://www.twitter.com/pzula">@pzula</a> on Twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First 100 Days as a Software Engineer]]></title>
    <link href="http://codeadventurer.com/2014/06/17/my-first-100-days-as-a-software-engineer"/>
    <updated>2014-06-17T07:58:00-04:00</updated>
    <id>http://codeadventurer.com/2014/06/17/my-first-100-days-as-a-software-engineer</id>
    <content type="html"><![CDATA[<p>Today marks 100 days* since my first day as a software engineer at Hireology, and it&rsquo;s been an amazing experience.</p>

<p>A week before I officially became a software engineer, I packed up my apartment in Denver, shipped some bigger things home, packed the rest of my life in a suitcase and hopped back on a plane to Akron, Ohio.</p>

<p>I had done it &mdash; I had learned as much as I could in the six months that I attended gSchool with my fellow classmates, and leveled up my game in building things on the web. I learned test-driven development, service oriented architecture, modular design and so many more things. And now, I had a week to reorganize my life, and start my job as a remote engineer on a product team.</p>

<!-- more -->


<p>I was excited, and I was nervous. I had seen parts of the code base during my interview process, and I had heard some of the other engineers talk about things I hadn&rsquo;t touched yet, like cucumber, mocking and stubbing, and services that encapsulated domain logic away from your models. Would I be able to catch on and hit the ground running? Or was I going to weigh down this small team of five?</p>

<p>I was very fortunate to have a friend and mentor already on the team. Matt, my mentor from my gSchool days, had been at Hireology since the fall. He was my onboarding buddy during my first week, and he helped me get my machine configured with our tools and codebase, got all of my various accounts set up, and got me familiar with the workflow. Margot, our product manager, already had a list of cards for me to work on in Trello. By 5pm on Monday, I had made my first commits and opened my first pull request against the codebase. I was thrilled! My fears of being a junior developer were unfounded, and I was in the race!</p>

<p>During the first few weeks, I was the hotfix team. The other engineers were wrapping up features for the end of the quarter, and we had some bugs that crept out from under the legacy codebase that needed wrangled. I got really familiar with using Ack and ctags to explore the codebase and dive deeper into methods that I needed to examine. In a short period of time, I became familiar with the main portions of the application, and started to learn where things lived. I fixed real problems in the application, and got to feel a real sense of purpose on the team.</p>

<p>Before the month was over, the whole engineering team flew to Chicago to plan out the next quarter of work. We all brainstormed together to flesh out feature stories with user personas, and although I was the newest member of the team, I got to participate. I was amazed to find that by the end of the week, many of the ideas I contributed to or collaborated on became a part of the product roadmap for the next quarter. Having that sort of involvement so early on made me even more excited about the team I was working with. This was what I had been looking for in a career &mdash; a way to contribute meaningfully to a product that helped people get things done.</p>

<p>The start of the quarter launched the following week, and we worked through pointing stories and assigning features. I found out that I would be working on something besides bugfixes, and once again that nervous excitement was upon me. I was in charge of rewriting and improving how the application dealt with cancellation, reactivation, and standby of accounts in our system and with our payment integration. I was going to be influencing <strong>every user</strong> in our system, and also a portion of our revenue. Me? In charge of how money changes hands? Wow.</p>

<p>Since the end of April, I&rsquo;ve been working steadily on this reimplementation. Through the mentorship of my coworkers, I have learned:</p>

<ul>
<li>how to collaborate remotely</li>
<li>how to write cucumber step definitions</li>
<li>how to use <a href="https://github.com/adomokos/light-service">LightService</a> to create organizers around small actions that house business logic</li>
<li>how to write custom validations</li>
<li>how to stop using <code>rails g</code> for anything</li>
<li>how to know the difference between a mock and a stub</li>
<li>how to write database-independent tests</li>
<li>how to make a latte</li>
<li>where to find the best animated gifs</li>
<li>that the best coworkers you can have hack late at night with you in the hotel lobby</li>
<li>and so many other things that have made this a blast</li>
</ul>


<p>By the end of this week, I&rsquo;m going to be submitting the last of the pull requests for my feature. By the start of next month, this new implementation will be used by customers all over the country (and Canada too!) The code is shiny, wrapped up in actions and organizers with concise names, the logic backed by unit tests and cucumber features for end-to-end assurance, and every bit of code has had many pairs of eyes on it, helpful bits given to me by everyone on the team through comments on the pull requests, and helpful pairing sessions when I was stuck.</p>

<p>This quarter has been a wild ride. That week between moving from Denver back home, I had no idea what the first 100 days would hold for me as a junior developer. I thought perhaps I would be on the QA team for months before I would be trusted with anything this substantial, and I am so glad I was wrong. This level of responsibility, and this level of trust that the team has given me has empowered me to push my learning to a new level and get more acclimated with our coding conventions and practices. This team has become a part of me, and I have happily become a part of the team that I&rsquo;ll never forget &mdash; because the first 100 days is just the beginning of the rest of my career.</p>

<p>(*Including weekends and a holiday; otherwise, I&rsquo;ve been actively committing code to the codebase for 71 days)</p>

<blockquote><p>Special thanks to everyone that has helped me in this journey &mdash; <a href="http://gschool.it">gSchool</a>, <a href="http://jumpstartlab.com">JumpstartLab</a>, <a href="http://turing.io">Turing</a>, my fellow classmates, my mentors, and my family and friends. I couldn&rsquo;t have done it without you!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Value of Mentorship]]></title>
    <link href="http://codeadventurer.com/2014/03/15/the-value-of-mentorship"/>
    <updated>2014-03-15T13:46:00-04:00</updated>
    <id>http://codeadventurer.com/2014/03/15/the-value-of-mentorship</id>
    <content type="html"><![CDATA[<p>When making the decision to start a new career, you might find yourself a little lost. This can lead to a lot of online searches, reading articles and books on the subject at hand, and trying to understand quite a bit of contradictory advice. Instead of more online searches and questions posted to forums, the best investment you can make is in finding a mentor to help you through the maze. Throughout my journey, I&rsquo;ve come across great mentors, and have been starting to see patterns that emerge during a mentorship that make the relationship valuable and fulfilling for both parties.</p>

<!-- more -->


<h2>An unintended mentorship</h2>

<p>Although I had been interested in building websites from the age of 12, the thought of becoming a graphic designer had never crossed my mind as a pathway to web design when it came time to choose a degree. This changed after I had met my best friend&rsquo;s girlfriend, <a href="http://www.bethsteffel.com/">Beth Steffel</a>, a senior studying graphic design at the University of Akron.</p>

<p>Beth was easy to talk to, and we shared similar taste in art and design. I&rsquo;d spend time at her apartment, peppering her with questions, leafing through her books, and getting miniature lessons in design. Although we became good friends, I consider Beth my first mentor. Her patience, support, and encouragement led me to follow in her footsteps and join the Myers School of Art with a focus on graphic design, an invaluable decision for my career path.</p>

<h2>Being a mentee requires time and focus</h2>

<p>Throughout college, I was exposed to many talented professors that taught us invaluable lessons in design, but I didn&rsquo;t form tight mentor relationships with any of them. Looking back, I don&rsquo;t think it was the fault of the school or the professors, but more-so my situation. I supported myself throughout school, and would dash off from class to my various jobs, working 30 or more hours a week. I didn&rsquo;t have the time to focus on becoming the best designer that I could be, my focus was survival.</p>

<p>Over the years, I have found that the best mentorship situations arise when both parties take time to foster the relationship. Taking the time to ask well-formed questions, asking for actionable feedback, and constantly working towards improvement are the best ways to utilize the time of someone that has offered to help you.</p>

<h2>Good mentors are all around us</h2>

<p>When I wanted to try my hand at organic farming, I lived in a community of many smart, experienced farmers. They offered advice, support, and positions ranging from field hand to farm manager. Each of the farmers I worked with were mentors to me. They answered my questions with patience, they were interested in my progress and experiments, and they taught me (through conversations and first-hand experience) about agriculture, biology, animal husbandry, and human relationships.</p>

<p>Identifying a good mentor is easier than you think. Mentors are interested in answering your questions. They may not know the answers to everything, but they have many resources that they can reach out to in order to help you find the answers. Mentors are patient. They don&rsquo;t talk down to you, or make you feel inferior because the questions you ask are the mark of a &lsquo;n00b&rsquo;. They will help you understand tough concepts, whether it&rsquo;s by asking you questions to lead you to a discovery, drawing a chart, or breaking a problem down into smaller pieces. Mentors break down the barriers between novices and themselves. They present themselves as people, not as gods, and make you feel comfortable and welcomed under their guidance. Most important of all, a good mentor is one that wants you to succeed.</p>

<h2>Mentorship with structure</h2>

<p>In the field of programming, we are constantly being mentored, whether we realize it or not. At gSchool, we had  a structured mentoring program. I was lucky enough to be paired with <a href="http://mattr.info/">Matt Rogers</a>, co-maintainer of Jekyll and Lead Engineer at <a href="http://hireology.com">Hireology</a>. Throughout the last 12 weeks of gSchool, we paired remotely almost weekly. We worked on  open-source projects like Jekyll and Tracks, and when I had questions about projects, we&rsquo;d pivot to my specific issues. It worked extremely well to be on a structured meeting schedule. Beyond our weekly meetings, Matt would send me check-in notes and ask about how things were going, whether it was the job hunt, VPS server setup, or meetings with instructors. He was in tune with what was going on during gSchool, and it was great to have a sounding board for ideas and questions that came out of our classwork and projects.</p>

<p>If you are learning something new, starting a new business, or getting your feet wet for a career change, mentorship is an important part of your growth. Structured mentorships are a great way to get going in the right direction, and can help dissolve some of the confusion that can come about from too much new information at once. Great places to look for mentors include your local Meetup groups, business accelerators, <a href="http://score.org">SCORE</a>, and if you are in the tech field, open source projects. Find the people that are doing what you want to do, and start a conversation with them. You&rsquo;ll find that there are many people willing to give back for all the help that they have received during the years.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons Learned as a Budding Programmer]]></title>
    <link href="http://codeadventurer.com/2014/02/07/lessons-learned-as-a-budding-programmer"/>
    <updated>2014-02-07T10:12:00-05:00</updated>
    <id>http://codeadventurer.com/2014/02/07/lessons-learned-as-a-budding-programmer</id>
    <content type="html"><![CDATA[<h2>A little background</h2>

<p>I wasn&rsquo;t new to computers five months ago when I started gSchool, a 6-month intensive &amp; immersive course in learning Ruby and Ruby on Rails, but I might as well had been.</p>

<p>I had spent the previous six years as a web designer who had a knack for getting things to work right. I had set up VPS servers, built up content management systems, and even began building lead generation systems from scratch in PHP with MySQL backends. I had heard acronyms like OO and MVC, but really didn&rsquo;t know how to program in an object-oriented way, or why models, views, and controllers even mattered. I came to gSchool thinking I would naturally be a top student, as I had been in other courses and programs. I quickly realized this wasn&rsquo;t the case, but it took me some time to come to terms with that. Looking back on the last five months I think I know why, and hope to be able to help others learning how to program understand what is happening if they come across similar frustrations.</p>

<!-- more -->


<h2>A different way of thinking</h2>

<p>If you aren&rsquo;t coming from a background like engineering or law, it may be that you aren&rsquo;t used to thinking in a way that is conducive to writing computer programs. A quick check to see if you might be naturally inclined to breaking down a problem into it&rsquo;s smallest logical parts is to pull out a <a href="http://www.griffonprep.com/logicgame.html">LSAT logic game</a> and spend some time trying to figure it out. Did you get the right answers? Then you might not have the same struggles I had. Throughout grade school, whenever I saw one of these word problems, I shuddered and usually froze. I never got the right answer. It wasn&rsquo;t until my interview with Katrina Owen to join gSchool that I had finally understood how to solve these problems. I had always tried to solve these problems by keeping all of the information in my head without writing anything down or drawing a chart. Suddenly, with this hint at not trying to keep all the information in my head, I started to make some progress.</p>

<p>The first few weeks of the course, we spent at least 30 minutes every morning working on LSAT logic games, and every day I noticed that it took less and less time to get to the correct answers, now that I had an idea of how to break down my thoughts on paper. I didn&rsquo;t notice this at the time, but now that I&rsquo;ve been programming non-stop for five months, I find that breaking out a pen and paper when a problem gets tough helps me visualize and articulate the problem so that I better understand it. Which leads me to one of the biggest take-a-ways from the last five months:</p>

<h2>You can&rsquo;t solve a problem that you don&rsquo;t understand.</h2>

<p>Programming is so much more than just memorizing syntax and what the standard library gives you for free. It&rsquo;s about using those tools in a way that is effective. When I started gSchool, I didn&rsquo;t understand the Ruby syntax or the problems that we were trying to solve. Looking back, I know that I spent much more time worrying about not understanding the standard library than worrying about not understanding the problem. In my first course assessment, I was told that I had a much better understanding of Ruby than the evaluator had expected, but that my &ldquo;algorithmic thinking&rdquo; was weak. This was so very true. After that assessment, I started to shift the weight of my focus on solving smaller problems more frequently. I worked on features from top to bottom in our web-based projects using Capybara to build the feature tests. I paired with classmates and tried to talk through my thought process.</p>

<h2>Pairing is better than &ldquo;rubber-ducking&rdquo; for beginners</h2>

<p>I heard about &ldquo;rubber duck debugging&rdquo; early in the course, which comes from the famous book, <a href="http://pragprog.com/the-pragmatic-programmer">&ldquo;The Pragmatic Programmer&rdquo;</a>, and suggests that a developer carry around a rubber duck and attempt to explain the problem to the duck. Usually, in the course of trying to explain the problem, the developer will better understand the problem herself and solve the issue without having to reach out to co-workers. Although this method is helpful now that I&rsquo;m comfortable with Ruby, (without a real rubber duck&hellip;)  at the start of the course I found it was not as helpful as pairing. When faced with a tough problem early into the program, pairing with another student would lead to solving the problem faster, as well as gaining a better understanding of why the solution worked. This hasn&rsquo;t changed, as our projects become increasingly complex and the sheer number of things to be thinking about has grown exponentially, but now I find myself &ldquo;rubber-ducking&rdquo; my way through harder bugs without having to break the flow of my team&rsquo;s progress.</p>

<h2>Daily practice is the fastest way to improve</h2>

<p>I knew that I needed to focus on learning how to build software in an intense environment, which I why I chose to come to a six month immersive course. But regardless of the situation, I do believe firmly that the best way to improve at programming &mdash; whether or not you are a beginner &mdash; is daily practice. Even if the daily practice is only an hour a day, if that time is focused, the daily habit is a great recipe for success. During the course, we have had a few interruptions in our schedule &mdash; mainly holidays and a few weather events &mdash; and I found that the best way to stay engaged and &ldquo;in the game&rdquo; was to program even during the interruptions in the course. A great tool for daily practice of syntax, style, problem-solving and test-driven development is <a href="http://exercism.io">exercism.io</a>, built by Katrina Owen. After we graduated from pen-and-paper LSAT problem-solving early in the course, we moved into warming up daily solving problems on exercism, which has been an amazing help.</p>

<h2>Reference the docs. A lot!</h2>

<p>The documentation of the Ruby API may not be the best for beginners, but it&rsquo;s also open source. One of the best tools I have found for referencing documentation (even without an internet connection), is <a href="https://itunes.apple.com/us/app/dash-docs-snippets/id458034879?mt=12">Dash</a>. It&rsquo;s worth the $20 for the amount of time you&rsquo;ll save not going down a Google rabbit hole. Even if you&rsquo;re a seasoned programmer, it&rsquo;s a great tool. You can even find various <a href="https://github.com/rizzatti/dash.vim">editor plugins</a> for even faster API reference straight from your codebase.</p>

<h2>The learning never stops, so don&rsquo;t give up!</h2>

<p>I remember wanting to know all the things, all at once, at the start of gSchool. It was frustrating, and worse, it was unattainable. Our field is constantly changing, which means we&rsquo;ll never get bored. It also means that it&rsquo;s impossible to know everything. The beauty of being immersed in learning for six months is that we got a lot of exposure to different problems and different methods of solving them. Does this mean that any of us can walk away and sit down and build an entire complex web application without referencing any documentation? No. The reality is that all programmers reference the docs, and knowing what problem you are trying to solve will be infinitely more beneficial than memorizing the entire standard library. Work on learning how to break down complex problems, and the knowledge of the API will come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful, Dynamic Database Seeding Scripts]]></title>
    <link href="http://codeadventurer.com/2014/02/01/beautiful_dynamic_database_seeding"/>
    <updated>2014-02-01T18:54:00-05:00</updated>
    <id>http://codeadventurer.com/2014/02/01/beautiful_dynamic_database_seeding</id>
    <content type="html"><![CDATA[<p>In our current Rails project, my team is building <a href="http://github.com/freshfinder">FreshFinder</a>, a community-edited Farmer&rsquo;s Market finder, with reviews. The main data we are using in our application, prior to user contributions, is data that we are pulling from <a href="http://data.gov">Data.gov</a>&rsquo;s Excel spreadsheet of USDA Farmer&rsquo;s Market Data. <!-- more -->A spreadsheet?? Yes. A spreadsheet. Because although they have a publicly-accessible API for the data, there are only two possible calls to this API, both of which do not contain all of the information otherwise contained in the Excel file.</p>

<p>Armed with the <code>CSV</code> Ruby library, some regex, some string splitting, and gsubbing, my team and I have been normalizing the data from the spreadsheet to build out a publically-accessible, RESTful API for our application&rsquo;s frontend to consume. While building it out, it makes sense to seed the database with real data from the spreadsheet, so I&rsquo;ve been learning a lot about building beautiful, dynamic seed scripts for Rails.</p>

<p>The first thing to consider is that although when you run <code>rake db:seed</code>, you&rsquo;re calling upon the <code>/db/seed.rb</code> file in Rails, you aren&rsquo;t constrained to just using this file. In my seed file, I <code>require</code> the files which contain the classes and methods I need access to, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./db/seeds/market_seeder&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./db/seeds/product_seeder&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">ProductSeeder</span><span class="o">.</span><span class="n">seed</span>
</span><span class='line'><span class="no">MarketSeeder</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see in the code above, I then call the <code>seed</code> method on both the <code>ProductSeeder</code> and the <code>MarketSeeder</code> classes. But before I ever even got to the point of calling these two methods in my <code>seeds.rb</code>, I wrote some tests, and I recommend you do the same.</p>

<p>It&rsquo;s important to remember that seed files are just POR, Plain Old Ruby, and that testing them is just like testing any other Ruby code that you produce. In my <code>spec</code> folder, I created a subfolder called <code>seeds</code> and built out the <a href="https://github.com/FreshFinder/to-the-market-api/blob/master/spec/seeds/market_seeder_spec.rb"><code>market_seeder_spec.rb</code></a> file to test parsing the CSV file and to expect changes to the database upon running it.</p>

<p>When we talked about what we wanted our seeder to do, we had two things that were important to us: the first was that we could dynamically control how many items got seeded into the database. This was important because we didn&rsquo;t want to be building and testing our mapping and search functionality with the full 8,200 farmer&rsquo;s markets records during the first week of development. The second thing that was important to us was getting feedback during the seeding process, which usually means outputting to the screen a piece of information for each object seeded with a <code>puts</code> statement. Each of these things presented a new way of thinking about seeding data for us.</p>

<p>To create a dynamic seeding process from our parsed CSV file, we accept an optional parameter in our <code>seed</code> method that takes a number and injects it into a range that gets run on the collection that builds each market, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">number</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">})</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="no">MarketSeeder</span><span class="o">.</span><span class="n">parse_file</span><span class="p">(</span><span class="s1">&#39;./db/seeds/source/2013_farmers_markets.csv&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">number</span>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">to_a</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">number</span><span class="o">].</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">build_markets</span><span class="p">(</span><span class="n">line</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">build_markets</span><span class="p">(</span><span class="n">line</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next piece of functionality, outputting the name of each market as each market was built with the <code>build_markets</code> method, was as simple as using a <code>puts</code> statement. However, the <code>puts</code> would output to the string even when a test was running, which quickly cluttered up test feedback. Thankfully, earlier in the week Katrina Owen had shown me a really neat concept I hadn&rsquo;t thought about before &mdash; that you could change what <code>puts</code> is being executed on, and in turn, change where the string gets captured.</p>

<p>The way this is done is to define your output parameter, and set the default to <code>STDOUT</code>, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">number</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">out</span> <span class="o">=</span> <span class="no">STDOUT</span><span class="p">)</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="no">MarketSeeder</span><span class="o">.</span><span class="n">parse_file</span><span class="p">(</span><span class="s1">&#39;./db/seeds/source/2013_farmers_markets.csv&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">number</span>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">to_a</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">number</span><span class="o">].</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">build_markets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">out</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">data</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">build_markets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">out</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">build_markets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
</span><span class='line'> <span class="n">m</span> <span class="o">=</span> <span class="no">Market</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:fmid</span> <span class="o">=&gt;</span> <span class="n">line</span><span class="o">[</span><span class="ss">:fmid</span><span class="o">]</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">line</span><span class="o">[</span><span class="ss">:marketname</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'> <span class="n">out</span><span class="o">.</span><span class="n">puts</span> <span class="n">line</span><span class="o">[</span><span class="ss">:marketname</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may be thinking, ok, so you&rsquo;re telling <code>puts</code> to run as a method on <code>STDOUT</code>, that&rsquo;s no different than it&rsquo;s default functionality. True. So in your test suite, you&rsquo;re going to require <code>StringIO</code>, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;stringio&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;Seeding a market&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@out</span> <span class="o">=</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;changes the count on the Market database when seeded&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="no">Market</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="no">MarketSeeder</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="vi">@out</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="no">Market</span><span class="o">.</span><span class="n">count</span><span class="p">}</span><span class="o">.</span><span class="n">by</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By piping <code>puts</code> to <code>StringIO</code>, you are capturing the feedback instead of outputting it to the string during testing, and thus relieved of the noise while running your specs.</p>

<p>After building our seed scripts for the first time using this method, I&rsquo;ve had a much better experience than when I used to shovel everything straight into the <code>db/seeds.rb</code> file. My code is easier to read, shorter, and has a better seperation of concerns. I encourage you to give it a try, and let me know any other tricks to creating great seeds scripts!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mashing Code at CodeMash]]></title>
    <link href="http://codeadventurer.com/2014/01/11/mashing-code-at-codemash"/>
    <updated>2014-01-11T14:30:00-05:00</updated>
    <id>http://codeadventurer.com/2014/01/11/mashing-code-at-codemash</id>
    <content type="html"><![CDATA[<p>This past week, gSchool continued on while I took a few steps into the Ohio developer community. I&rsquo;ve been to conferences before, but not as a Ruby developer. <!-- more -->I&rsquo;ve been to conferences about web development in higher education, conferences focused on WordPress, and conferences focused on Drupal, but <a href="http://codemash.org">CodeMash</a> was my first multi-language conference &mdash; and the first one I&rsquo;d attended at at waterpark.</p>

<p>The conference was interesting. I met a lot of people from the surrounding states that worked in many different fields, but over and over again I heard people repeat the same mantra, or some rendition of it &mdash; &ldquo;.Net for pay, Ruby for play&rdquo;. This was interesting to me, because although I knew I&rsquo;d be returning to Ohio after gSchool, I hadn&rsquo;t looked into the job opportunities available before I accepted a slot in the class. I doubt if it would have changed my mind to know that locally there are only a handful of companies that work with Ruby, because I was very adamant about learning test driven development in a language that has a strong culture of testing.</p>

<p>Regardless, the first two days of the conference are called &ldquo;Precompiler&rdquo; days, where multiple half-day or whole-day workshops are run on different topics. I took the opportunity to learn about hacking on flying robots with Jim Weirich on Tuesday, and used his library, <a href="http://github.com/jimweirich/argus">Argus</a>, along with the <a href="https://github.com/hybridgroup/artoo">Artoo</a> library, to control an <a href="http://ardrone2.parrot.com">Ardrone</a> using <a href="http://leapmotion.com">LeapMotion</a>. I got to work with two other Ruby developers, Joel Byler and Ashton, while hacking &amp; discovering our way around the intricacies and mishaps of working with hardware and concurrent connections in Ruby. On the second Precompiler day, I worked with Arduino and beginning electronics, and had the opportunity to pair with some more brilliant, curious programmers to think about hardware hacking in ways I had not explored before. I learned new debugging tricks, and made connections between my basic circuitry knowledge and programming those interactions with Processing.</p>

<p>The final two days of the conference were more typical conference track sessions. I spent a good bit of time in the Javascript tracks, made a bit of progress in understanding Ember applications, and learned new concepts about concurrency in Ruby from <a href="http://twitter.com/jerrydantonio">Jerry D&#8217;Antonio</a>. I came away with new things to research and incorporate into future projects, and a great appreciation for the conference organizers. Over 2,000 people came together to learn new things, experiment with new tech, and share their experiences together, and all of it went smoothly from an attendee standpoint.</p>

<p>I&rsquo;m heading back to Denver to dive full-swing into our API project, and look forward to incorporating some Javascript techniques I learned about into the project. Although we&rsquo;re all thinking about where we&rsquo;re going to end up after gSchool, I want to finish my time there strong, and continue the full-time learning and experimentation while we&rsquo;re all still together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[56 days until takeoff]]></title>
    <link href="http://codeadventurer.com/2014/01/03/56-days-until-takeoff"/>
    <updated>2014-01-03T09:05:00-05:00</updated>
    <id>http://codeadventurer.com/2014/01/03/56-days-until-takeoff</id>
    <content type="html"><![CDATA[<p>56 days from now, 26 students from gSchool will be closing their laptops, saying their goodbyes, and getting ready to start their careers as software developers. <!-- more --> Some of them will be staying in Denver, some will be joining past graduates of the program built by Jumpstart Lab, and others will be spreading out across the country, working at startups, consultancies, and corporations. Regardless of where they end up, the six months they spent together will never be forgotten. The shared wins and frustrations, the walking taco days and lunchtime dip parties, and plenty of post-project-deadline happy hours have built solid friendships that are sure to last the test of time.</p>

<p>Before that day comes, I still have work to do. As I&rsquo;m reading Sandi Metz&rsquo;s book, <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?ie=UTF8&amp;qid=1388765519&amp;sr=8-1&amp;keywords=practical+object-oriented+design+in+ruby">Practical Object Oriented Design in Ruby</a>, I see that I can improve on the way I think about and execute the design of applications. I&rsquo;m excited to work through the book, and apply the lessons in my projects.</p>

<p>I&rsquo;m also attending <a href="http://codemash.org">CodeMash</a> this upcoming week and will begin looking for companies where I would make a good fit. I&rsquo;m planning on returning to Ohio after graduation, and would like to see what sort of opportunities are available. Thanks to my instructors, I already have a few connections to meet with next week to discuss the job climate in the Cleveland area. I&rsquo;m excited to talk to them and get to know other Rubyists in Ohio.</p>

<p>While I&rsquo;m at CodeMash, I&rsquo;ll be missing work time on our current project, FeedEngine, which is all about APIs. I&rsquo;ll be doing my best to communicate with my group, and contribute where I can without interfering with the overall progress. It will be interesting to see if I can integrate lessons from the conference into the project as well.</p>

<p>I&rsquo;m also excited for our upcoming project focused on Service-Oriented Architecture, and finally our Mastery project. I received some fun hardware for Christmas and hope to use it in my final project to integrate my passion for technology with my passion for agriculture.</p>

<p>On a final note, my mentor, Matt Rogers, has been a tremendous resource. His help and understanding has really helped me grow as a developer. I applaud his ability to find relevant open-source work to help explain new concepts, or reinforce the ones I did not understand well. He has been diligent in following along the curriculum, asking me about the projects I am working on, and helping me understand where improvements can be made. I am very grateful for his time and his passion for mentoring. Without his help, I wouldn&rsquo;t have made as much learning progress in the last project as I had. Thank you, Matt!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Halfway Home]]></title>
    <link href="http://codeadventurer.com/2013/12/06/halfway-home"/>
    <updated>2013-12-06T09:05:00-05:00</updated>
    <id>http://codeadventurer.com/2013/12/06/halfway-home</id>
    <content type="html"><![CDATA[<p>Last week marked the halfway point for gSchool. We had our second assessments, using the instructions from the <a href="https://github.com/JumpstartLab/curriculum/blob/master/source/academy/workshops/scrabble_intermediate.markdown">Intermediate Scrabble</a> repo and requirements. <!-- more -->It was a fun challenge, and I&rsquo;ve had some major improvement since the previous assessment. After our assessments, we worked on a Rails tutorial that introduced some more advanced concepts. On Tuesday, the rest of the class worked on Arduino projects, but I had to catch a flight home for the holiday and missed out on that particular hack day. (But I got a few fun things from <a href="http://www.sparkfun.com">Sparkfun</a> on sale that I&rsquo;m going to hack on over Christmas). It felt great to go home for a few days, spend time with family, sleep in my bed, and program for only four hours instead of all day.</p>

<p>This week we got back at it in full force. We&rsquo;re working on <a href="http://tutorials.jumpstartlab.com/projects/fourth_meal.html#functional-requirements">Fourth Meal</a>, building upon Dinner Dash using a codebase that is different from the last project. My group chose the project I worked on last time, which I am grateful for, because I did not feel I understood all of the parts of it before. We started out by refactoring a few pieces of the code, exploring the implementations, deploying a staging and production site, and writing our user stories in <a href="https://www.pivotaltracker.com/s/projects/968652">Pivotal Tracker</a>. We&rsquo;ve been focused on writing proper user stories, understanding our iterations, and dealing with a &ldquo;real&rdquo; client (&ldquo;real&rdquo; meaning Jeff Casimir, acting (in good character)  a demanding client). Our project includes expanding the original codebase to support multi-tenancy (i.e. multiple restaurants in the system with the ability to shop between them independently). I&rsquo;m enjoying the focus on iterations, and sticking to user stories throughout the development process. I believe it&rsquo;s important to delivering value as quickly as possible in an agile way.</p>

<p>Yesterday, we also started a small side project with <a href="http://yacenter.org/">Young Entrepreneurs</a> to help a group of kids launch their online presence for the small businesses they are working on. We have a different group in this project than for Fourth Meal, and are primarily working on design and listening to client needs. Our clients are two young girls (age 7 and 11) that have launched their own body care products line. They are very excited about their products, and it amazes me at how professional they acted for their ages. We had a great brainstorming session with them, and I&rsquo;m looking forward to sharing our ideas and wireframes with them next week for their input.</p>

<p>Halfway through the course, I&rsquo;m feeling excited about my progress and the ways I&rsquo;ve grown along the way. I&rsquo;m excited to see where I stand at the end of the course, and how I continue to progress at my first job out of gSchool. I feel that my ability to collaborate with other developers has vastly improved. Prior to gSchool, I was always a lone coder &mdash; this was not by choice, but due to the work styles of the previous workplaces. I&rsquo;m starting to get better at articulating my thoughts verbally during pair programming sessions, explaining why something makes sense in my head without taking over someone&rsquo;s keyboard, and articulating when I&rsquo;m stuck on a piece of functionality and the thought process behind what I&rsquo;m trying to accomplish and the things I&rsquo;ve already tried that didn&rsquo;t seem to work.</p>

<p>I&rsquo;m excited to continue working on Fourth Meal with my group members, and seeing where we can take this project by the deadline. It will be interesting to see if we have estimated our iterations correctly, and to see if keeping a close eye on Tracker will help us reach our goals and deliver a great final product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dinner Dash, Battleship & Javascript]]></title>
    <link href="http://codeadventurer.com/2013/11/22/dinner-dash"/>
    <updated>2013-11-22T11:07:00-05:00</updated>
    <id>http://codeadventurer.com/2013/11/22/dinner-dash</id>
    <content type="html"><![CDATA[<p>Last week, we finished up our Dinner Dash project in Rails. It was a great first dive into Rails, and I had a lot of fun learning about ActiveRecord, ActiveSupport, and all of the helper methods. <!-- more --> One of the biggest things I learned as we were wrapping up the project and working through our user interface is that in order to do BDD effectively, a project really needs to start off with wireframes. In the last two projects where I have used BDD, it&rsquo;s been a little rough connecting the user interface up in a logical way at the end. It makes much more sense to work through it at the beginning to help guide the final development and make design an easier piece of the puzzle.</p>

<p><img src="http://codeadventurer.com/images/dinner_dash.png" title="Platable" alt="Platable" />
<a href="http://platable.herokuapp.com">(See Platable on Heroku)</a></p>

<p>At the end of last week, we had our second code retreat. We worked through a few 50-minute sessions to build <a href="https://github.com/JumpstartLab/code_retreat">Battleship</a> under different constraints. Unlike our last code retreat, where the scope was much smaller and tests were provided to help guide the design of the API, this time there were only instructions of how the gameplay works. Although the problem is very interesting, it was frustrating to keep switching the context of which piece of the game we were building, and it did not seem like any of my pairs and I got remotely close to solving the piece at hand before we had to delete our code and start over on a new part of the game. However, the exercise has definitely piqued my interest, and I plan on revisiting Battleship on my own to try to build it as a CLI.</p>

<p>This week. we&rsquo;ve been working on JavaScript. It&rsquo;s been great to see how you can test JavaScript using Jasmine, and I&rsquo;ve started to fill in some of the holes in my previous JavaScript knowledge. The best part of the week when we went back to our Dinner Dash projects and started integrating the things we had learned into our projects by updating our cart data with ajax, generating JSON with Rails, and giving live feedback to users purchasing products. The changes we started to implement really began to make the projects shine, and made them feel more like modern web applications.</p>

<p>Overall, on the next project, I&rsquo;d like to integrate more wire framing, a more thought-out user interface, and a bit more of JavaScript to make the project feel more solid.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dashing Down the Rails]]></title>
    <link href="http://codeadventurer.com/2013/11/08/dashing-down-the-rails"/>
    <updated>2013-11-08T10:13:00-05:00</updated>
    <id>http://codeadventurer.com/2013/11/08/dashing-down-the-rails</id>
    <content type="html"><![CDATA[<p>It&rsquo;s amazing to look back on my time here at gSchool and realize that at this point in time, if I were in a shorter bootcamp program, I&rsquo;d be graduating today. <!-- more --> Instead, I&rsquo;m midway through my first Rails project, and learning about all of the features that Rails implements for me through a well-thought-out Ruby backend. When I want to write my own validators or database searches, I start down that journey, but then quickly realize that Rails has already taken care of it for me and that I just need to find the right method in the documentation.</p>

<p>I can imagine what a contrast this is for people who learn as little Ruby as possible in order to get by using all the magic that Rails provides. I think that if I didn&rsquo;t know about the internals of how it worked, I would likely end up in the same boat as when I was hacking things together in Drupal. I have often heard that it is best to know Ruby before working with Rails, and now having experience with both Ruby, and Sinatra, I can see the differences between what Rails provides, and what the language itself does for me, which I think is very important for anyone using any framework.</p>

<p>Our current project is called <a href="http://tutorials.jumpstartlab.com/projects/dinner_dash.html">Dinner Dash</a>, and the task at hand is to build an online ordering system for a restaurant. My group has been working with MiniTest, RackTest &amp; Capybara to use a BDD-style approach to the project, and we have also been using PivotalTracker to track our progress, combined with <a href="http://nvie.com/posts/a-successful-git-branching-model/">git flow</a> to keep ourselves organized. My mentor works for PivotalLabs, and was very helpful in giving me a few more tips on how to use PivotalTracker to map through our user stories and scheduling our work and expectations.</p>

<p>At the beginning of this project, I was having a hard time mapping my prior knowledge of SQL queries and database relationships to ActiveRecord, but now I have a better grasp on it thanks to two sessions with two different people that helped me understand what was happening. My mentor, Brian Rose from PivotalLabs, helped me understand the entity relationship diagram of our current application by installing the <code>rails-erd</code> gem into our project and generating a PDF of our relationships for me. This was helpful to see, and his explanations helped immensely. I also sat with Jorge and we drew a few diagrams with carefully placed labels to map out a new many-to-many relationship I was creating, and now I think I have a good hold on the whole <code>belongs_to</code>, <code>has_many</code>, <code>is_one_of</code> structure.</p>

<p>I think that besides structuring models, views, and controllers well and understanding ActiveRecord, knowing all of the work that Rails can do might take a little time to learn and master &mdash; but overall I&rsquo;m enjoying working with it. My goals for this project are to get my feet wet with Rails, and start to understand where it can lift some of the burden of common tasks when building applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Rails with PostgreSQL locally]]></title>
    <link href="http://codeadventurer.com/2013/11/02/running-rails-with-postgresql-locally"/>
    <updated>2013-11-02T13:18:00-04:00</updated>
    <id>http://codeadventurer.com/2013/11/02/running-rails-with-postgresql-locally</id>
    <content type="html"><![CDATA[<p>I had a few issues installing Rails for the first time with PostgreSQL locally, and since the problems I was having as a newbie in both were not well-documented on the internet, I thought I&rsquo;d post a rundown of what happened and how I fixed it. <!-- more --></p>

<h3>Installing pgsql with home-brew</h3>

<p>This topic has been covered exhaustively on the web, but the way I did it was to run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew update
</span><span class='line'>$ brew install postgresql</span></code></pre></td></tr></table></div></figure>


<p>Then, I followed the rest of the directions in the terminal to finish my install, and to install the pg gem.</p>

<p><strong><em>Big thing of note:</em></strong> If you are not sure you followed all the directions, and you&rsquo;re getting crazy errors, and you&rsquo;ve already closed your terminal, all is not lost!</p>

<p>You can run <code>brew info postgresql</code> to see the instructions again and double check.</p>

<h3>Fixing your broken PG Connection in Rails</h3>

<p>I decided to start my first rails project with pgsql, because I wanted to give it a try and after using sqlite3 a few times already, I was ready to graduate to something I could actually deploy on Heroku.</p>

<p>So I created my brand-new rails app by running this command in my terminal:</p>

<p><code>rails new blogger -d postgresql</code></p>

<p>Everything looked gravy, until I loaded up <a href="http://localhost:3000">http://localhost:3000</a> and got the big red Rails error with something I did not understand:</p>

<p><code>PG::ConnectionBad (FATAL:  role "blogger" does not exist
):</code></p>

<p>So I found that after doing that, I did some research and found that I needed to run the rake task to actually set up the databases. That&rsquo;s fine by me! So I ran this in my terminal:
<code>rake db:create:all</code></p>

<p>Then, my terminal blew up and the error I would get would be:
<code>FATAL:  role "blogger" does not exist</code></p>

<p>Not knowing much about this, I spent some time searching and found out that I needed to create a new user named the same thing as the user in my <code>database.yml</code> file in the Rails app. Mine happens to be <code>blogger</code>, so I then went into my terminal and ran the following command:
<code>createuser -s -r blogger</code></p>

<p>Then, I ran this command again, this time successfully: <code>rake db:create:all</code></p>

<p>After doing this, and restarting my Rails server, I went back to <a href="http://localhost:3000">http://localhost:3000</a> and I was happily riding the Rails!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scraping a Website, Building a CMS]]></title>
    <link href="http://codeadventurer.com/2013/11/01/scraping-a-website"/>
    <updated>2013-11-01T09:12:00-04:00</updated>
    <id>http://codeadventurer.com/2013/11/01/scraping-a-website</id>
    <content type="html"><![CDATA[<p>This week, we started a quick-turnaround project in Sinatra called <a href="http://tutorials.jumpstartlab.com/projects/clone_wars.html">Clone Wars</a>. Our challenge was to pick one of five local businesses, build a CMS for their existing types of content, and then scrape their existing website into our database &mdash; all in three days. <!-- more --></p>

<p>On Monday, before the project started, we took a little time to research web scrapers as a class. Afterwards, we did a short <a href="http://tutorials.jumpstartlab.com/topics/mechanize.html">tutorial</a> with the <a href="https://github.com/sparklemotion/mechanize">Mechanize</a> and <a href="https://github.com/sparklemotion/nokogiri">Nokogiri</a> gems, and started scraping different websites.</p>

<p>We were assigned our teams in the afternoon, and got to planning out our project. We got up to speed on what local business we wanted to choose (we went for the <a href="http://thebikedepot.org/">Bike Depot</a>), and started sketching out what the different types of content might look like. We set up our hours of availability as a team, and decided that we wanted to approach the entire project from an acceptance-test-first approach. It was our first time trying it, but we were all very interested in learning how to do it.</p>

<p>We then sat down with Elaine from <a href="http://pivotallabs.com/">Pivotal Labs</a> (and prior gSchool student) to talk about user stories, acceptance tests, and <a href="http://www.pivotaltracker.com/">PivotalTracker</a>. She gave us a lot of good insight on how to use the tool, and soon we started crafting our user stories for the project.</p>

<p>Once we got to the point where we felt we had flushed out the project requirements from a user story perspective, we started digging in. We set up our Sinatra app, and began by writing our first Capybara user test. We ran that first test… and it passed. That didn&rsquo;t make any sense &mdash; we had not set up any routes for the route that we had requested, and certainly did not have any views to display the content that the test requested!</p>

<p>This problem tripped us up for over an hour, when we discovered that in our Gemfile we had declared a test group, but we had not yet set our environment variables in our acceptance test. We also later discovered that looking for content as the first piece of an acceptance test is too many steps into the process &mdash; the first step would be to verify the response code. Finally on our way to a true failing test, we moved to the first piece of the error, and started working our way through the controller, the models, and the views. It was exciting to go through the process and actually successfully go from dummy data to a real database with real data in the matter of a few hours, and then repeat the process over and over again throughout the process.</p>

<p>From my perspective, our team worked incredibly well together. When one of us would get stuck, we&rsquo;d stop and explain what was happening, and why. We all paired (side note: what is the three-person equivalent of pairing? Triading?) throughout the length of the project, since we  had a small enough project that it was likely we might end up with merge conflicts otherwise.</p>

<p>Although we did not completely finish building the CMS in three days, we learned a lot about scraping, dynamic routing, serializing data into databases, and setting up different rack test groups. We had an awesome time trying the acceptace-test-first approach, and stuck together as a group to work through tough problems.</p>

<p>The differences between working in a two person versus a three person group weren&rsquo;t too obvious, since our project was so compact. I can definitely see where a four person group might split into two pairs that rotate, but with three people at different levels in the program, and with a small spec and a short timeframe, it seemed more appropriate to stick together and learn together.</p>

<p>If we had another week to work on Clone Wars, we&rsquo;d likely get our authorization working correctly, and work on integrating more functionality into the CMS &mdash; including the addition of news items, products for sale, and a volunteer database.</p>

<p>Overall, I was extremely satisfied with where we got with our project because I felt that we built it well, communicated with each other clearly, and have a solid foundation to build upon when we choose to revisit the project.</p>

<p>To see the project in action, you can visit George&rsquo;s <a href="https://github.com/Egogre/CloneWarz">GitHub repository</a>, clone the project, run <code>bundle</code>, then run <code>rackup</code> in your terminal, and visit your localhost for a peek at the project. At localhost/admin, you can view our CMS functionality. Make sure to take a look at our test suite, and run the tests by running the <code>rake</code> command in your terminal. Then marvel at the beautiful rainbow of passing tests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Apps &amp; Code Retreats]]></title>
    <link href="http://codeadventurer.com/2013/10/28/web-apps-and-code-retreats"/>
    <updated>2013-10-28T09:22:00-04:00</updated>
    <id>http://codeadventurer.com/2013/10/28/web-apps-and-code-retreats</id>
    <content type="html"><![CDATA[<p>Our latest project, finished last week, was <a href="http://tutorials.jumpstartlab.com/projects/idea_box.html">IdeaBox</a>. As mentioned in a previous post, we started building the project from a tutorial, without tests, and went from there. <!-- more --> I added unit tests before the weekend, and then started using Capybara for acceptance tests last. After watching the <a href="http://www.youtube.com/watch?v=BG_DDUD4M9E">RailsConf talk on BDD</a>, I realized I&rsquo;d much rather work from the outside-in approach demonstrated in the talk.*</p>

<p>After building through IdeaBox on our own, we presented the projects on Thursday afternoon. It was great to see everybody&rsquo;s work, and see how far they got in the project, learn about their &ldquo;a-ha!&rdquo; moments, and also hear about pain points. It was great to see a project starting to turn out differently &mdash; I&rsquo;m sure as the course progresses, we will end up with vastly different projects than in the first third of the course.</p>

<p>On Friday, we all left the classroom and Galvanize to have an all-day code retreat. We made our way to the <a href="http://www.rivernorthart.com/">RiNo</a> part of Denver and spent the day inside of <a href="https://www.facebook.com/thesourcedenver">The Source</a>, a rehabbed warehouse-turned-young-money-shopping-facility. (I&rsquo;m probably totally wrong, but that&rsquo;s the best way I can describe it). We spent the day pairing in 30 minute time blocks, switching partners after every time block, and working on the same problem from scratch in a different way. In the morning, we worked through the <a href="https://github.com/JumpstartLab/code_retreat/tree/master/beer">Beer Song</a> problem spec, and in the afternoon we worked through the <a href="https://github.com/JumpstartLab/code_retreat/tree/master/robot">Robot</a> spec. Each was interesting in it&rsquo;s own way, and both tested fundamentals &mdash; working with strings, or working with arrays and hashes.</p>

<p>It was exciting to work with so many different classmates, and come up with so many different solutions, based on different contraints. I learned about how to build a program with no conditional statements (since <code>if</code> is not object oriented), learned about traversing through an array using modulo math, and various other amazing tidbits. I had a lot of fun, learned a bunch, and left at the end of the day completely exhausted, but mentally invigorated. I hope that I can continue to participate in code retreats beyond gSchool &mdash; it seems like an amazing way to keep developers sharp and practice different pairing techniques.</p>

<p>I&rsquo;m really enjoying being back in web territory. I have a foundational understanding some things already, so I can focus on testing the applications, using Ruby, and building things in a TDD (or BDD) fashion. I definitely like Sinatra, and that it&rsquo;s lightweight enough that you can choose your own design pattern, your own database ORM, and pretty much everything inbetween. In contrast, I started playing with Rails for the first time last week, and I&rsquo;m not sure how I feel about how much work it does for the developer. I&rsquo;m sure I&rsquo;ll change my mind once I know how to build everything from scratch really well and don&rsquo;t want to always do it myself, but for now I enjoy learning how to implement all of the pieces.</p>

<hr />

<p><strong><em>Side note:</em></strong>
* My reason for liking the idea of BDD comes from the various times I&rsquo;ve been bitten by not having a way to test the entire experience from a user perspective. Our workload at my previous position was so high that often the developers would run through scenarios at a high level, test that things worked on their own machines, and ship the code to production. Often, many things went wrong in this process, sometimes after the client had already seen the problems themselves. We had started out with QA testers, but over time the people in the company that did QA on development projects were eventually reassigned to other things, leaving the developers without dedicated QA resources, and no time to do testing themselves. I would have loved to be able to do BDD back then, but then again, I&rsquo;m just learning about it now! I think I might give this approach a shot in a future project at gSchool, just to see how it differs from starting with unit tests first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naming Your Weakness]]></title>
    <link href="http://codeadventurer.com/2013/10/26/naming-your-weakness"/>
    <updated>2013-10-26T13:28:00-04:00</updated>
    <id>http://codeadventurer.com/2013/10/26/naming-your-weakness</id>
    <content type="html"><![CDATA[<p>This past week at gSchool, we had our first assessment. We were offered a problem, in this case, the <a href="http://tutorials.jumpstartlab.com/academy/workshops/scrabble.html">building blocks of the Scrabble game</a>, which included a short guide <!-- more -->that informed us of some of the API decisions based on the expected input and output of the program, and we sat down with one of our three instructors for 40 minutes, while they watched and listened to us work through the problem.</p>

<p>As an exercise in Enumerators a few weeks ago, I took a similar look at the beginnings of the Scrabble exercise (counting word scores), so I did not spend too much time &ldquo;preparing&rdquo; for the assessment. I did not want to memorize how to solve the problem, because I wanted a raw feel to how my process works from my instructors&#8217; perspective, so that I knew what I needed to work on improving.</p>

<p>Honestly, I was a little surprised by how it went. Although I got much further in solving the problem (with a little guidance in the right direction when I steered off course), my happiness with progress was not the purpose of the review. My reviewer pointed out that I had difficulties breaking down problems into their smaller pieces, and writing tests for these smaller pieces prior to attempting to solve the problem with code. I was using tests to verify my solutions as I busted through a problem, instead of using smaller tests along the way to drive the solutions.</p>

<p>I can memorize all the syntax out there, that has never been a problem for me. But can I use it efficiently and effectively? Not as well as I should. I was the student who shirked away from math courses, but loved science classes. I can tell you how many things work, recite hundreds of odd facts, but can I break down a logical pathway of WHY they work that way, and apply it to something else? Not always.</p>

<p>I thought I came to gSchool to learn Ruby best practices, learn agile and TDD, and make sure that I don&rsquo;t get lost in the world of StackOverflow and Google when I get stuck. But really, what I&rsquo;m starting to realize is that beyond those things, I came to gSchool to learn algorithmic thinking.</p>

<p>Learning to program is easy if you have a good foundation of algorithmic thinking, but this is something I never knew until this week. I had never heard the term until my assessment, and after the assessment, I wanted to do everything in my power to learn more about it, how to develop it, and find problems to practice.</p>

<p>My research on the matter leads me to conclude this:</p>

<ul>
<li>Repetition is how this skill is built</li>
<li>Smaller exercises are easier to digest</li>
<li>Math problems are actually great ways of building this skill</li>
<li>If you were a math major or minor, you&rsquo;ve probably mastered this already</li>
</ul>


<p>I guess it&rsquo;s finally time to face my fears of math so that I can become a better programmer.</p>

<p>As resources to help me practice building this skill, I&rsquo;m going to use various websites to work through at least a problem a day. <a href="http://projecteuler.net/">ProjectEuler</a> actually fits all three of the criteria above for how to build the skill. The problems are small, the build on one another, and they are math-focused. I&rsquo;ve found another, <a href="http://rosalind.info/problems/list-view/">Rosalind</a>, which is focused on BioInformatics, and seems promising for not quite as math-heavy solutions. Another interesting site is <a href="http://rubyquiz.com/">RubyQuiz</a>, but this one might not be quite as helpful, as many of the quizzes seem to already contain a problem break-down spelled out for the user.</p>

<p>My goal is to look back at the assessment at the end of this course, and inherently know how to break down a problem into it&rsquo;s smallest parts. I hope to marvel at how easily I can solve this problem, and many others &mdash; not through memorizing the solution, but by knowing how to work through the details.</p>

<hr />

<h4>Asides</h4>

<p>I also found <a href="http://www.google.com/edu/computational-thinking/index.html">this resource</a>, provided by Google, for any educators looking to teach kids math through the use of computational thinking. I may go through some of the exercises myself, even if they are for grades 6-12!</p>

<p><a href="https://www.udacity.com/course/cs215">This free course from Udacity</a> also explains algorithms through social networks. I&rsquo;ve started working through it and it seems like it will be helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to the land of HTTP requests]]></title>
    <link href="http://codeadventurer.com/2013/10/18/back-to-the-land-of-http-requests"/>
    <updated>2013-10-18T08:58:00-04:00</updated>
    <id>http://codeadventurer.com/2013/10/18/back-to-the-land-of-http-requests</id>
    <content type="html"><![CDATA[<p>This week, we started using Sinatra to build a web application. At the start of the week, we built <a href="http://tutorials.jumpstartlab.com/projects/web_guesser.html">WebGuesser</a>, a random-number guessing site <!--more -->that allows for a user to guess the number, and gives feedback on how close they are. <a href="http://agile-peak-6795.herokuapp.com/">My version</a> has a few bugs. For instance, if two people are accessing the site at the same time and playing, each person&rsquo;s guess counts towards the total, so you may only guess once or twice and be presented with a &ldquo;Too many guesses&rdquo; message. This can easily be solved with session cookies, but I haven&rsquo;t gotten around to refactoring yet. I&rsquo;m sure I&rsquo;ll get a chance to come back and make that short project better.</p>

<p>We also started building <a href="http://tutorials.jumpstartlab.com/projects/idea_box.html">IdeaBox</a>, a place for someone to jot down ideas and store them. Originally, I just worked through the tutorial to have an understanding of the application, and then I implemented a few changes before writing tests. It was hard to work through the tutorial to understand what was happening and try to write tests at the same time, but now that I have gone back and written tests for the application, I am much more comfortable with moving forward with implementing the extensions.</p>

<p>I actually feel that writing the tests gave me a better understanding of each piece of the application. I definitely felt the pain of not having tests when I had decided to change how IDs are generated and add them to the YAML database, without any tests to help me spot where things were breaking. I&rsquo;m still shaky on the best ways to test web applications from the acceptance-test level, but I&rsquo;ve got five more months to nail that piece!</p>

<p>What I like about this project is that we are working at our own pace. Some people will have amazing full-blown web apps with design, users, SMS capability, etc. at the end of this, others will have gone through the basic implementation, and everyone will have a better understanding of how web applications work. It&rsquo;s also been great to be in groups of four because we are all at different stages of the project, and can ask for help in specific places, instead of being dragged along by a stronger pair.</p>

<p>Next week, we&rsquo;re going to have our first assessment. I think we&rsquo;ll be paired with one of our instructors for the length of the assessment, and will have to build a program while being observed. This sounds a little intimidating, but the instructors are also there to provide feedback on our thought process and implementation, which I think is one of the coolest opportunities in the program. I think I&rsquo;ll be overall in a good place during the assessment, and I&rsquo;m very eager to find out what I need to spend more time learning and understanding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A week of focus is worth a thousand projects]]></title>
    <link href="http://codeadventurer.com/2013/10/11/a-week-of-focus-is-worth-a-thousand-projects"/>
    <updated>2013-10-11T09:01:00-04:00</updated>
    <id>http://codeadventurer.com/2013/10/11/a-week-of-focus-is-worth-a-thousand-projects</id>
    <content type="html"><![CDATA[<p>This past week at gSchool, we broke out into groups based on how comfortable we felt with the projects we had done and the techniques and methods used in them. <!-- more --> We had an emerging group, a progress group, and an advanced group. In these groups, we would focus on taking what we knew, building on it, and pushing ourselves past our comfort levels.</p>

<p>I felt like I could get some benefit out of the exercises the emerging group has been working on (like locking in various ways of using hashes, arrays, and enumerators), but I also had a feeling that I might have a good enough grasp on those things that I could push myself in a different way. Instead, I chose to join in with Jeff&rsquo;s group, the progress group, to take a fresh look at our first paired project from a few weeks back, <a href="http://tutorials.jumpstartlab.com/projects/event_reporter.html">EventReporter</a>.</p>

<p>The first time around this project, I had been tackling it from the provided test routes, one item at the time. I also had chosen not to work closely with my pair, because he had completed the assignment several times before and was beyond my level in terms of understanding how to do it, and I had wanted to learn how to go about it myself instead of watching someone code things I did not understand. If I had actually paired with him, I probably would have had the project completed, but I&rsquo;m not sure if I would have learned as much. So originally, my EventReporter was not complete, nor very pretty.</p>

<p>It was great to step through the thought process with Jeff this week. He helped us understand how to break down the problem, how to start with an MVP, how to create test doubles (or stubs) so that our tests were independent of each other (in the case of unit tests), and to build small pieces of a project and get one piece working at a time using test-driven development. He also helped us understand when to use text fixtures, and when to use hard-coded data in tests.</p>

<p>Throughout the week, we tacked a method or two a day, writing the tests, talking through the process, and slowly chipping away at the requirements. We started with a much better separation of concerns than the first time around (when many of us had everything in one giant method, in one giant file). It felt great to bring in all of our pieces yesterday, and write one controller that brought it all to life as a command line interface. After a little debugging, many of us had an EventReporter that worked, in half of the time with twice the quality of the first round.</p>

<p>Although I&rsquo;m not yet a master of creating beautiful, small, concise methods, and knowing when to use <code>send</code> instead of an <code>if</code> statement, I have a great example with commit messages at every step to reference when I need to dig in and remember how we did things.</p>

<p>It was great to work with a group at my same level of understanding for the week, and not be derailed by questions that are either to basic or too advanced for our current skillset. I&rsquo;m not sure if I&rsquo;d want the entire 24 weeks to work this way, but I do think that pairing with someone of a similar skill level is helpful. I have found that when I have been paired with someone who has been programming in Ruby for longer than the course, that they often do not explain their thought process and just forge ahead to get done with things, instead of hanging back to bring the person with less experience up to their level. I believe the true purpose of pairing is to slow down, explain your thought process, and pair through a problem together. If more advanced students were willing to do this without taking control of a project, I&rsquo;d be happy to be paired with them. Otherwise, I&rsquo;d rather stay with someone who is at the same level of understanding as me.</p>

<p>After this week of focus, which has helped me immensely in terms of understanding how to do things the right way (moreso than working independently on projects without much instruction) I&rsquo;m excited that we&rsquo;re digging into web applications next week. Although I&rsquo;ve built small web systems in PHP before, I know I have a lot to learn and am eager to get on the right path.</p>

<p>(<strong>Title disclaimer</strong>: *Ok, so perhaps more like worth two projects)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turtles & Mentors]]></title>
    <link href="http://codeadventurer.com/2013/10/04/learning-from-a-mentor"/>
    <updated>2013-10-04T20:41:00-04:00</updated>
    <id>http://codeadventurer.com/2013/10/04/learning-from-a-mentor</id>
    <content type="html"><![CDATA[<p>Our most recent project at gSchool, called <a href="http://tutorials.jumpstartlab.com/projects/sales_engine.html">SalesEngine</a>, was quite a stretch for a lot of us in the class. <!-- more --> Beyond the complexity of EventReporter, we had not had any time to recover from that project, overview the lessons learned, and reinforce the most important concepts from from the project. Instead, we jumped right into the next project, some of us without even having touched EventReporter, others with only half of the project completed.</p>

<p>With our new pairs, we dove into the requirements. The project looked massive at first glance, but slowly we started to follow through the requirements (with very handy method and class name requirement) and made progress.</p>

<p>Our progress skidded to a halt once we hit the relationships piece. Although I understand databases, foreign key relationships and how to get my data in and out of MySQL using PHP, I had no idea how to get my objects to pass around stored information to each other in Ruby.</p>

<p>My partner was equally confused. We stepped through an explanation with Jorge on Friday, and spent the weekend putting it together. We took the approach of calling our main interface class, SalesEngine, from every other piece of the program, so that we could reach through SalesEngine down into our data storage collections (called Repositories in this project). Apparently, we didn&rsquo;t understand the Object Model, but then again we haven&rsquo;t talked much about the Object Model except for the fact that everything is an object.</p>

<p>Having completed our relationships piece exactly the wrong way, we were on to building the pieces of business intelligence into the program. Suddenly we had to actually make our idea of the relationships make sense in our heads to get these pieces working, and suddenly everything seemed to be running in circles. On Monday, our instructor Katrina helped us understand where we went wrong, and showed us how to pass through a copy of SalesEngine (by using <code>self</code>) to each repository, and in turn to each individual piece of the program.</p>

<p>We spent a good deal of time of Monday refactoring our relationship model, and finally were back to our original issue: how do we grab and compare data stored in different places in the application?</p>

<p>After some nudging and help from various instructors, we started to understand how things were supposed to work. On Tuesday, with two days to go, we got to building the first few pieces of business intelligence. I sat down to read the piece on the first item, and this is what my psuedocode looked like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">test_it_can_find_the_merchant_with_the_most_x_revenue</span>
</span><span class='line'>    <span class="n">engine</span> <span class="o">=</span> <span class="no">SalesEngine</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;./test/fixtures&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># find all invoices by merchant_id</span>
</span><span class='line'>    <span class="c1"># then find each invoice id for the merchant_id</span>
</span><span class='line'>    <span class="c1"># use invoice_id to call invoice_items that match</span>
</span><span class='line'>    <span class="c1"># compare these invoice_id&#39;s to tranactions invoice_id </span>
</span><span class='line'>    <span class="c1"># only use the ids that have result == success</span>
</span><span class='line'>    <span class="c1"># take the quantitiy of the items &amp; multiply by the price</span>
</span><span class='line'>    <span class="c1"># process the price into BigDecimal (don&#39;t use Float)</span>
</span><span class='line'>    <span class="c1"># store that in an array</span>
</span><span class='line'>    <span class="c1"># sort the array on .sort or some similar array method</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end, this pseudocode actually didn&rsquo;t help me out at all. It wasn&rsquo;t until I stepped back and read through
all of the requirements that I realized that starting at the top of the list would not get us to the final endpoint. In order to report the top <code>x</code> merchants based on revenue, we would have to create helper classes associated with invoices and transactions.</p>

<p>Eventually, by the end of the night we had tested and created methods for our individual <code>Merchant</code>, <code>Invoice</code>, <code>Transaction</code>, and <code>MerchantRepository</code> classes to help us get some sort of response from the system.</p>

<p>But there was a bug. And that it turns out that wherever there is one bug, there are many more in hiding. It was 4:30, and the instructors were leaving for the day, and we were stuck.</p>

<p>Thankfully, <a href="https://twitter.com/corylanou">Cory LaNou</a> and <a href="https://twitter.com/levicook">Levi Cook</a>, founders and developers at <a href="http://www.supportlocal.com/">SupportLocal</a>, offer their time and energy for help on Tuesday evenings to gSchool students.</p>

<p>Cory spent four hours with my partner and I that night, showing us how to debug a program, and exploring with us where things were going wrong. Besides various errors that we have made using core methods, we also discovered that our test data set was completely useless without our foreign keys matching up. It took us that fours hours to get two tests to pass.</p>

<p>I couldn&rsquo;t believe how much time he had spent with us, going around in circles, walking us through debugging, and helping us find the issues in our program. I would love it if every mentor out there were as patient as Cory.</p>

<p>Although in the end we did not finish SalesEngine, I believe the lessons we learned from Cory about debugging, and the persistence needed when tracking down issues, were monumental, and very important to the success of our future projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning from the Community]]></title>
    <link href="http://codeadventurer.com/2013/09/29/learning-from-the-community"/>
    <updated>2013-09-29T18:40:00-04:00</updated>
    <id>http://codeadventurer.com/2013/09/29/learning-from-the-community</id>
    <content type="html"><![CDATA[<p>This past week of gSchool, we got our first outside-of-the-classroom introductions to the Ruby community by attending <a href="http://rockymtnruby.com/">Rocky Mountain Ruby Conf</a><!-- more -->, and also by having a personal session with <a href="https://github.com/wayneeseguin">Wayne E. Seguin</a>, the original creator of RVM.</p>

<p>Wayne taught us a few important lessons, but the most important advice I heard is to know yourself, and to know how to deal with yourself. As a similar work-a-holic, when I am at home (aka: not in gSchool, where work-a-holicism is somewhat of a neccessity), I tend to spend hours learning new things after work, and ignoring my friends and family. Although great for keeping up with the current tech trends, this tends to wear on my personal relationships. To combat this, Wayne has set aside the 5pm to 8pm block of time as &ldquo;family time&rdquo;, and has alerted all of his friends, the open source projects he works on, and his colleagues of this rule. He sticks to it, and with this expectation, he does not let anyone down. His family knows his focus is on them during that time, and his co-collaborators respect that he is away and unavailable to work during that time of day.</p>

<p>At Rocky Mountain Ruby, I learned a lot about the community. Aside from the stickers, soft tshirts, and good food, the presenters where really knowledgable about their topics. I have attended conferences before, but I have never been to a conference with only one track. This was interesting to me, because although I didn&rsquo;t have enough practical knowledge on the subject, I was forced to hear about threading, Go (the language), and 17 databases that I&rsquo;ve never heard of before, I listened throughout the presentations and was able to learn something about the subject. Coming out of the conference, I was amazed at how much I had understood about every presentation. It goes to show that if you listen and try to understand, you will learn.*</p>

<p>Learning from the community, regardless of whether it is the Ruby community, or another community in general, is a very interesting experience. If you listen carefully, you hear about the triumphs, the losses, the intersections of people and pride, and the lessons that others have learned. I&rsquo;ve found that it is wise to listen hard during these anecdotes, because those that wore this path before us have made mistakes (or discoveries) that we can benefit from knowing, and hopefully apply to our own individual journeys.</p>

<p><strong>*Pro-tip:</strong> Sit in the front during conferences and presentations. If you have any sense of shame left in you, you won&rsquo;t be as compelled to whip open your laptop or check your phone. And without distractions, there is only one thing left to do: listen to the presentation.</p>
]]></content>
  </entry>
  
</feed>
